// commands/reminder-system.js - Teljes eml√©keztet≈ë rendszer
const { EmbedBuilder } = require('discord.js');
const config = require('../config');
const { profileManager, generateRandomId } = require('../utils/user-profiles');

// Akt√≠v eml√©keztet≈ëk t√°rol√°sa (mem√≥ri√°ban - production-ben adatb√°zis)
const activeTimeouts = new Map();

async function handleSlashReminder(interaction) {
    const subcommand = interaction.options.getSubcommand();

    switch (subcommand) {
        case 'egyszer':
            await handleOneTimeReminder(interaction);
            break;
        case 'farm':
            await handleFarmReminder(interaction);
            break;
        case 'lista':
            await handleReminderList(interaction);
            break;
        case 'le√°ll√≠t':
            await handleStopReminder(interaction);
            break;
    }
}

async function handleOneTimeReminder(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const minutes = interaction.options.getInteger('perc');
    const message = interaction.options.getString('√ºzenet');

    if (minutes > config.bot.maxReminderMinutes) {
        const errorEmbed = new EmbedBuilder()
            .setColor(config.colors.error)
            .setTitle('‚ùå T√∫l hossz√∫ id≈ëtartam!')
            .setDescription(`Maximum ${config.bot.maxReminderMinutes} perc (24 √≥ra) √°ll√≠that√≥ be.`)
            .setTimestamp();

        return interaction.editReply({ embeds: [errorEmbed] });
    }

    try {
        const reminderId = generateRandomId(8);
        const targetTime = new Date(Date.now() + minutes * 60 * 1000);

        // Eml√©keztet≈ë regisztr√°l√°sa
        const reminder = profileManager.setUserReminder(interaction.user.id, reminderId, {
            type: 'once',
            message: message,
            nextRun: targetTime.toISOString()
        });

        // Timeout be√°ll√≠t√°sa
        const timeoutId = setTimeout(async () => {
            await sendReminder(interaction, reminder);
            activeTimeouts.delete(reminderId);
        }, minutes * 60 * 1000);

        activeTimeouts.set(reminderId, timeoutId);

        const confirmEmbed = new EmbedBuilder()
            .setColor(config.colors.success)
            .setTitle('‚è∞ Eml√©keztet≈ë Be√°ll√≠tva!')
            .setDescription(`Eml√©keztetni foglak **${minutes} perc** m√∫lva.`)
            .addFields(
                { name: 'üìù √úzenet', value: message, inline: false },
                { name: 'üîî √ârtes√≠t√©s id≈ëpontja', value: `<t:${Math.floor(targetTime.getTime() / 1000)}:F>`, inline: false },
                { name: '‚è±Ô∏è M√©g h√°tra', value: `<t:${Math.floor(targetTime.getTime() / 1000)}:R>`, inline: false }
            )
            .setFooter({ text: `Eml√©keztet≈ë ID: ${reminderId}` })
            .setTimestamp();

        await interaction.editReply({ embeds: [confirmEmbed] });

    } catch (error) {
        console.error('Hiba az eml√©keztet≈ë be√°ll√≠t√°s√°n√°l:', error);
        
        const errorEmbed = new EmbedBuilder()
            .setColor(config.colors.error)
            .setTitle('‚ùå Hiba t√∂rt√©nt!')
            .setDescription('Nem siker√ºlt be√°ll√≠tani az eml√©keztet≈ët.')
            .setTimestamp();

        await interaction.editReply({ embeds: [errorEmbed] });
    }
}

async function handleFarmReminder(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const hours = interaction.options.getInteger('√≥r√°nk√©nt') || 8;

    try {
        const reminderId = generateRandomId(8);
        const nextRun = new Date(Date.now() + hours * 60 * 60 * 1000);

        // Farm eml√©keztet≈ë regisztr√°l√°sa
        const reminder = profileManager.setUserReminder(interaction.user.id, reminderId, {
            type: 'farm',
            message: 'üöú Farmol√°si eml√©keztet≈ë! Ideje ellen≈ërizni a farmokat √©s er≈ëforr√°sokat.',
            interval: hours * 60 * 60 * 1000, // milliszekundumban
            nextRun: nextRun.toISOString()
        });

        // Els≈ë eml√©keztet≈ë be√°ll√≠t√°sa
        const timeoutId = setTimeout(async () => {
            await sendFarmReminder(interaction, reminder, hours);
        }, hours * 60 * 60 * 1000);

        activeTimeouts.set(reminderId, timeoutId);

        const confirmEmbed = new EmbedBuilder()
            .setColor(config.colors.warning)
            .setTitle('üöú Automatikus Farm Eml√©keztet≈ë Be√°ll√≠tva!')
            .setDescription(`Eml√©keztetni foglak **${hours} √≥r√°nk√©nt** a farmol√°sra.`)
            .addFields(
                { name: 'üîî Els≈ë eml√©keztet≈ë', value: `<t:${Math.floor(nextRun.getTime() / 1000)}:F>`, inline: false },
                { name: 'üîÑ Ism√©tl≈ëd√©s', value: `${hours} √≥r√°nk√©nt`, inline: true },
                { name: '‚èπÔ∏è Le√°ll√≠t√°s', value: `\`/eml√©keztet≈ë le√°ll√≠t t√≠pus:farm\``, inline: true }
            )
            .setFooter({ text: `Farm eml√©keztet≈ë ID: ${reminderId}` })
            .setTimestamp();

        await interaction.editReply({ embeds: [confirmEmbed] });

    } catch (error) {
        console.error('Hiba a farm eml√©keztet≈ë be√°ll√≠t√°s√°n√°l:', error);
        
        const errorEmbed = new EmbedBuilder()
            .setColor(config.colors.error)
            .setTitle('‚ùå Hiba t√∂rt√©nt!')
            .setDescription('Nem siker√ºlt be√°ll√≠tani a farm eml√©keztet≈ët.')
            .setTimestamp();

        await interaction.editReply({ embeds: [errorEmbed] });
    }
}

async function handleReminderList(interaction) {
    const reminders = profileManager.getUserReminders(interaction.user.id);
    const activeReminders = reminders.filter(r => r.isActive);

    if (activeReminders.length === 0) {
        const noRemindersEmbed = new EmbedBuilder()
            .setColor(config.colors.warning)
            .setTitle('‚è∞ Nincs Akt√≠v Eml√©keztet≈ë')
            .setDescription('Jelenleg nincs be√°ll√≠tott eml√©keztet≈ëd.')
            .addFields({
                name: 'üöÄ Ind√≠ts egyet!',
                value: 'Haszn√°ld a `/eml√©keztet≈ë egyszer` vagy `/eml√©keztet≈ë farm` parancsokat.',
                inline: false
            })
            .setTimestamp();

        return interaction.reply({ embeds: [noRemindersEmbed], ephemeral: true });
    }

    const listEmbed = new EmbedBuilder()
        .setColor(config.colors.primary)
        .setTitle(`‚è∞ Akt√≠v Eml√©keztet≈ëk (${activeReminders.length})`)
        .setDescription('**Az √∂sszes akt√≠v eml√©keztet≈ëd:**')
        .setThumbnail(interaction.user.displayAvatarURL())
        .setTimestamp();

    for (let i = 0; i < Math.min(activeReminders.length, 8); i++) {
        const reminder = activeReminders[i];
        const nextTime = new Date(reminder.nextRun);
        const typeEmoji = reminder.type === 'farm' ? 'üöú' : '‚è∞';
        const typeText = reminder.type === 'farm' ? 'Farm eml√©keztet≈ë' : 'Egyszeri eml√©keztet≈ë';

        listEmbed.addFields({
            name: `${i + 1}. ${typeEmoji} ${typeText}`,
            value: `**√úzenet:** ${reminder.message.slice(0, 50)}${reminder.message.length > 50 ? '...' : ''}\n**K√∂vetkez≈ë:** <t:${Math.floor(nextTime.getTime() / 1000)}:F>\n**ID:** \`${reminder.id}\``,
            inline: false
        });
    }

    if (activeReminders.length > 8) {
        listEmbed.setFooter({ text: `Csak az els≈ë 8 eml√©keztet≈ë van megjelen√≠tve a ${activeReminders.length}-b√≥l.` });
    }

    await interaction.reply({ embeds: [listEmbed], ephemeral: true });
}

async function handleStopReminder(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const type = interaction.options.getString('t√≠pus');

    try {
        const stoppedReminders = profileManager.stopUserReminders(interaction.user.id, type);

        // Akt√≠v timeout-ok lemond√°sa
        const userReminders = profileManager.getUserReminders(interaction.user.id);
        for (const reminder of userReminders) {
            if (!reminder.isActive && activeTimeouts.has(reminder.id)) {
                clearTimeout(activeTimeouts.get(reminder.id));
                activeTimeouts.delete(reminder.id);
            }
        }

        const typeText = type === 'all' ? '√∂sszes' : type === 'farm' ? 'farm' : 'egyszeri';
        
        const confirmEmbed = new EmbedBuilder()
            .setColor(config.colors.success)
            .setTitle('‚èπÔ∏è Eml√©keztet≈ëk Le√°ll√≠tva')
            .setDescription(`**${stoppedReminders.length}** ${typeText} eml√©keztet≈ë lett le√°ll√≠tva.`)
            .setTimestamp();

        await interaction.editReply({ embeds: [confirmEmbed] });

    } catch (error) {
        console.error('Hiba az eml√©keztet≈ëk le√°ll√≠t√°s√°n√°l:', error);
        
        const errorEmbed = new EmbedBuilder()
            .setColor(config.colors.error)
            .setTitle('‚ùå Hiba t√∂rt√©nt!')
            .setDescription('Nem siker√ºlt le√°ll√≠tani az eml√©keztet≈ëket.')
            .setTimestamp();

        await interaction.editReply({ embeds: [errorEmbed] });
    }
}

// Eml√©keztet≈ë k√ºld√©se
async function sendReminder(interaction, reminder) {
    try {
        const reminderEmbed = new EmbedBuilder()
            .setColor('#FF4500')
            .setTitle('üîî Eml√©keztet≈ë!')
            .setDescription(`**${reminder.message}**`)
            .addFields(
                { name: 'üë§ Be√°ll√≠totta', value: `<@${interaction.user.id}>`, inline: true },
                { name: '‚è∞ Be√°ll√≠tva', value: `<t:${Math.floor(new Date(reminder.createdAt).getTime() / 1000)}:R>`, inline: true }
            )
            .setTimestamp();

        await interaction.followUp({ 
            content: `<@${interaction.user.id}>`, 
            embeds: [reminderEmbed] 
        });

    } catch (error) {
        console.error('Hiba az eml√©keztet≈ë k√ºld√©s√©n√©l:', error);
    }
}

// Farm eml√©keztet≈ë k√ºld√©se (ism√©tl≈ëd≈ë)
async function sendFarmReminder(interaction, reminder, hours) {
    try {
        const farmEmbed = new EmbedBuilder()
            .setColor('#32CD32')
            .setTitle('üöú Farm Eml√©keztet≈ë!')
            .setDescription('**Ideje ellen≈ërizni a farmokat √©s er≈ëforr√°sokat!**')
            .addFields(
                { name: 'üéØ Mit csin√°lj?', value: '‚Ä¢ Ellen≈ërizd a farmjaidet\n‚Ä¢ Gy≈±jtsd be az er≈ëforr√°sokat\n‚Ä¢ T√°madj √∫j farmokat\n‚Ä¢ Ellen≈ërizd a kereskedelmet', inline: false },
                { name: 'üîÑ K√∂vetkez≈ë eml√©keztet≈ë', value: `${hours} √≥ra m√∫lva`, inline: true },
                { name: '‚èπÔ∏è Le√°ll√≠t√°s', value: '`/eml√©keztet≈ë le√°ll√≠t t√≠pus:farm`', inline: true }
            )
            .setTimestamp();

        await interaction.followUp({ 
            content: `<@${interaction.user.id}>`, 
            embeds: [farmEmbed] 
        });

        // K√∂vetkez≈ë eml√©keztet≈ë be√°ll√≠t√°sa
        const nextTimeout = setTimeout(async () => {
            await sendFarmReminder(interaction, reminder, hours);
        }, hours * 60 * 60 * 1000);

        activeTimeouts.set(reminder.id, nextTimeout);

    } catch (error) {
        console.error('Hiba a farm eml√©keztet≈ë k√ºld√©s√©n√©l:', error);
    }
}

module.exports = {
    handleSlashReminder
};
