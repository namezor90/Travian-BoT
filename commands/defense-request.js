// commands/defense-request.js - V√©d√©si k√©r√©s rendszer (JAV√çTOTT)
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, ChannelType, PermissionFlagsBits } = require('discord.js');
const config = require('../config');
const { getTribeData, getDefenseUnits } = require('../utils/tribe-data');

// Akt√≠v v√©d√©si k√©r√©sek t√°rol√°sa (mem√≥ri√°ban)
const activeDefenseRequests = new Map();

async function handleDefenseCommand(message) {
    const defenseEmbed = new EmbedBuilder()
        .setColor(config.colors.defense)
        .setTitle('üõ°Ô∏è V√©d√©si K√©r√©s Rendszer')
        .setDescription('**T√°mad√°s √©rkezik a faluba?** K√©rj seg√≠ts√©get az alliance-t√≥l!')
        .addFields(
            { name: 'üìã Mit kell megadni?', value: '‚Ä¢ üë§ J√°t√©kos √©s falu neve\n‚Ä¢ ‚è∞ T√°mad√°s √©rkez√©si id≈ëpontja\n‚Ä¢ üè∫ Magt√°r √°llapot\n‚Ä¢ üß± Fal szintje', inline: false },
            { name: 'üéØ Mi t√∂rt√©nik?', value: '‚Ä¢ Automatikus v√©d√©si csatorna l√©trehoz√°s\n‚Ä¢ V√©d≈ëk jelentkezhetnek\n‚Ä¢ Automatikus eml√©keztet≈ëk', inline: false },
            { name: '‚ö° Gyors haszn√°lat', value: 'Kattints a gombra √©s t√∂ltsd ki az ≈±rlapot!', inline: false }
        )
        .setFooter({ text: 'Alliance Defense System v2.0' })
        .setTimestamp();

    const requestButton = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('defense_request_modal')
                .setLabel('üõ°Ô∏è V√©d√©si K√©r√©s Ind√≠t√°sa')
                .setStyle(ButtonStyle.Danger)
                .setEmoji('üö®')
        );

    await message.reply({ embeds: [defenseEmbed], components: [requestButton] });
}

async function showDefenseModal(interaction) {
    const modal = new ModalBuilder()
        .setCustomId('defense_form')
        .setTitle('üõ°Ô∏è V√©d√©si K√©r√©s - R√©szletek');

    const playerName = new TextInputBuilder()
        .setCustomId('player_name')
        .setLabel('üë§ J√°t√©kos neve')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('pl. Namezor90')
        .setRequired(true);

    const villageName = new TextInputBuilder()
        .setCustomId('village_name')
        .setLabel('üèòÔ∏è Falu neve √©s koordin√°t√°i')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('pl. Er≈ëd (15|25)')
        .setRequired(true);

    const attackTime = new TextInputBuilder()
        .setCustomId('attack_time')
        .setLabel('‚è∞ T√°mad√°s √©rkez√©si id≈ëpontja')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('pl. 14:30 vagy 2024.12.24 14:30')
        .setRequired(true);

    const granaryInfo = new TextInputBuilder()
        .setCustomId('granary_info')
        .setLabel('üè∫ Magt√°r √°llapot')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('pl. 50k b√∫za, 80% tele')
        .setRequired(true);

    const wallLevel = new TextInputBuilder()
        .setCustomId('wall_level')
        .setLabel('üß± Fal szintje')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('pl. 15-√∂s szint')
        .setRequired(true);

    const rows = [
        new ActionRowBuilder().addComponents(playerName),
        new ActionRowBuilder().addComponents(villageName),
        new ActionRowBuilder().addComponents(attackTime),
        new ActionRowBuilder().addComponents(granaryInfo),
        new ActionRowBuilder().addComponents(wallLevel)
    ];

    modal.addComponents(...rows);
    await interaction.showModal(modal);
}

async function processDefenseRequest(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const playerName = interaction.fields.getTextInputValue('player_name');
    const villageName = interaction.fields.getTextInputValue('village_name');
    const attackTime = interaction.fields.getTextInputValue('attack_time');
    const granaryInfo = interaction.fields.getTextInputValue('granary_info');
    const wallLevel = interaction.fields.getTextInputValue('wall_level');

    try {
        // V√©d√©si csatorna l√©trehoz√°sa
        const channelName = `${config.defense.channelNamePrefix}${playerName.toLowerCase().replace(/\s/g, '-')}`;
        
        const defenseChannel = await interaction.guild.channels.create({
            name: channelName,
            type: ChannelType.GuildText,
            parent: config.channels.defenseCategory,
            topic: `V√©d√©si k√©r√©s - ${playerName} (${villageName}) - T√°mad√°s: ${attackTime}`,
            permissionOverwrites: [
                {
                    id: interaction.guild.id,
                    allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages],
                },
                {
                    id: interaction.user.id,
                    allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ManageMessages],
                }
            ]
        });

        // K√©r√©s ID gener√°l√°sa (timestamp + channel ID utols√≥ 4 jegye)
        const requestId = `defense_${Date.now()}_${defenseChannel.id.slice(-4)}`;
        
        // V√©d√©si k√©r√©s adatok t√°rol√°sa
        activeDefenseRequests.set(requestId, {
            channelId: defenseChannel.id,
            requesterId: interaction.user.id,
            playerName,
            villageName,
            attackTime,
            granaryInfo,
            wallLevel,
            defenders: new Map(),
            createdAt: new Date()
        });

        // V√©d√©si inform√°ci√≥s embed
        const defenseInfoEmbed = new EmbedBuilder()
            .setColor(config.colors.defense)
            .setTitle('üõ°Ô∏è V√âD√âSI K√âR√âS - S√úRG≈êS!')
            .setDescription(`**${playerName}** v√©d√©sre szorul!`)
            .addFields(
                { name: 'üë§ K√©relmez≈ë', value: `<@${interaction.user.id}>`, inline: true },
                { name: 'üèòÔ∏è Falu', value: villageName, inline: true },
                { name: '‚è∞ T√°mad√°s √©rkez√©s', value: attackTime, inline: true },
                { name: 'üè∫ Magt√°r √°llapot', value: granaryInfo, inline: true },
                { name: 'üß± Fal szint', value: wallLevel, inline: true },
                { name: 'üìä St√°tusz', value: 'üî¥ **V√©d≈ëk keres√©se**', inline: true }
            )
            .setThumbnail(interaction.user.displayAvatarURL())
            .setFooter({ text: `ID: ${requestId} | Csatorna: ${defenseChannel.id}` })
            .setTimestamp();

        // V√©d√©si gombok
        const defenseButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`defend_infantry_${requestId}`)
                    .setLabel('üõ°Ô∏è Gyalogs√°g k√ºld√©se')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId(`defend_cavalry_${requestId}`)
                    .setLabel('üêé Lovass√°g k√ºld√©se')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId(`defend_mixed_${requestId}`)
                    .setLabel('‚öîÔ∏è Vegyes v√©delem')
                    .setStyle(ButtonStyle.Secondary)
            );

        const utilityButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`defense_status_${requestId}`)
                    .setLabel('üìä V√©d≈ëk list√°ja')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId(`defense_close_${requestId}`)
                    .setLabel('‚úÖ V√©d√©s lez√°r√°sa')
                    .setStyle(ButtonStyle.Danger)
            );

        // √úzenet k√ºld√©se a v√©d√©si csatorn√°ba
        await defenseChannel.send({
            content: '@everyone üö® **S√úRG≈êS V√âD√âSI K√âR√âS!**',
            embeds: [defenseInfoEmbed],
            components: [defenseButtons, utilityButtons]
        });

        // Meger≈ës√≠t≈ë √ºzenet
        const confirmEmbed = new EmbedBuilder()
            .setColor(config.colors.success)
            .setTitle('‚úÖ V√©d√©si K√©r√©s Sikeresen L√©trehozva!')
            .setDescription(`V√©d√©si csatorna l√©trehozva: ${defenseChannel}`)
            .addFields(
                { name: 'üìä R√©szletek', value: `**Falu:** ${villageName}\n**T√°mad√°s:** ${attackTime}`, inline: false },
                { name: 'üéØ K√∂vetkez≈ë l√©p√©sek', value: '‚Ä¢ A csatorn√°ban v√°rhatod a v√©d≈ëket\n‚Ä¢ Automatikus eml√©keztet≈ëket fogsz kapni\n‚Ä¢ A v√©d≈ëk jelentkezhetnek gombokkal', inline: false },
                { name: 'üÜî K√©r√©s ID', value: `\`${requestId}\``, inline: false }
            )
            .setFooter({ text: 'Alliance Defense System v2.0' })
            .setTimestamp();

        await interaction.editReply({ embeds: [confirmEmbed] });

    } catch (error) {
        console.error('Hiba a v√©d√©si k√©r√©s l√©trehoz√°sakor:', error);
        
        const errorEmbed = new EmbedBuilder()
            .setColor(config.colors.error)
            .setTitle('‚ùå Hiba t√∂rt√©nt!')
            .setDescription('Nem siker√ºlt l√©trehozni a v√©d√©si k√©r√©st.')
            .addFields(
                { name: 'Lehets√©ges okok', value: '‚Ä¢ Nincs jogosults√°gom csatorna l√©trehoz√°s√°hoz\n‚Ä¢ Hib√°s kateg√≥ria ID\n‚Ä¢ Szerver hiba', inline: false }
            )
            .setFooter({ text: 'K√©rj seg√≠ts√©get egy adminisztr√°tort√≥l' })
            .setTimestamp();

        await interaction.editReply({ embeds: [errorEmbed] });
    }
}

async function handleDefenseActions(interaction) {
    const [action, type, ...restParts] = interaction.customId.split('_');
    const requestId = restParts.join('_'); // √ñsszerakjuk a requestId-t
    
    if (action !== 'defend' && action !== 'defense') return;

    // √öJ: Ha nincs mem√≥ri√°ban, pr√≥b√°ljuk meg rekonstru√°lni a csatorna alapj√°n
    let defenseRequest = activeDefenseRequests.get(requestId);
    
    if (!defenseRequest) {
        // Pr√≥b√°ljuk meg rekonstru√°lni az adatokat a csatorna alapj√°n
        defenseRequest = await reconstructDefenseRequest(interaction, requestId);
        
        if (!defenseRequest) {
            await interaction.reply({ 
                content: '‚ùå Ez a v√©d√©si k√©r√©s m√°r nem akt√≠v! (A bot √∫jraindult - k√©rd egy admint, hogy ind√≠tson √∫j k√©r√©st)', 
                ephemeral: true 
            });
            return;
        }
    }

    if (action === 'defend') {
        // V√©d≈ë egys√©gek k√ºld√©se
        await showDefenseUnitModal(interaction, type, requestId);
    } else if (action === 'defense') {
        if (type === 'status') {
            await showDefenseStatus(interaction, requestId);
        } else if (type === 'close') {
            await closeDefenseRequest(interaction, requestId);
        }
    }
}

// √öJ FUNKCI√ì: V√©d√©si k√©r√©s rekonstru√°l√°sa
async function reconstructDefenseRequest(interaction, requestId) {
    try {
        // A csatorna ID-t pr√≥b√°ljuk meg kinyerni a requestId-b≈ël
        const channelId = interaction.channel?.id;
        
        if (!channelId) return null;
        
        // Alap√©rtelmezett v√©d√©si k√©r√©s l√©trehoz√°sa
        const reconstructedRequest = {
            channelId: channelId,
            requesterId: null, // Nem tudjuk rekonstru√°lni
            playerName: 'Ismeretlen j√°t√©kos',
            villageName: 'Ismeretlen falu',
            attackTime: 'Ismeretlen id≈ë',
            granaryInfo: 'Nincs adat',
            wallLevel: 'Nincs adat',
            defenders: new Map(),
            createdAt: new Date(),
            reconstructed: true // Jel√∂lj√ºk, hogy rekonstru√°lt
        };
        
        // T√°roljuk a rekonstru√°lt k√©r√©st
        activeDefenseRequests.set(requestId, reconstructedRequest);
        
        console.log(`üîÑ V√©d√©si k√©r√©s rekonstru√°lva: ${requestId}`);
        return reconstructedRequest;
        
    } catch (error) {
        console.error('Hiba a v√©d√©si k√©r√©s rekonstru√°l√°sakor:', error);
        return null;
    }
}

async function showDefenseUnitModal(interaction, unitType, requestId) {
    const modal = new ModalBuilder()
        .setCustomId(`defense_units_${unitType}_${requestId}`)
        .setTitle(`üõ°Ô∏è ${unitType.charAt(0).toUpperCase() + unitType.slice(1)} V√©delem`);

    const playerName = new TextInputBuilder()
        .setCustomId('defender_name')
        .setLabel('üë§ J√°t√©kos neve')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('pl. V√©d≈ë123')
        .setRequired(true);

    const villageName = new TextInputBuilder()
        .setCustomId('defender_village')
        .setLabel('üèòÔ∏è Falu neve (honnan k√ºld√∂d)')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('pl. T√°maszpont (20|30)')
        .setRequired(true);

    const units = new TextInputBuilder()
        .setCustomId('defense_units')
        .setLabel(`‚öîÔ∏è ${unitType === 'infantry' ? 'Gyalogos' : unitType === 'cavalry' ? 'Lovas' : 'Vegyes'} egys√©gek`)
        .setStyle(TextInputStyle.Paragraph)
        .setPlaceholder('pl. L√©gi√≥: 100, Test≈ërs√©g: 50')
        .setRequired(true);

    const arrivalTime = new TextInputBuilder()
        .setCustomId('arrival_time')
        .setLabel('‚è∞ √ârkez√©si id≈ëpont')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('pl. 14:25 (5 perccel a t√°mad√°s el≈ëtt)')
        .setRequired(true);

    const rows = [
        new ActionRowBuilder().addComponents(playerName),
        new ActionRowBuilder().addComponents(villageName),
        new ActionRowBuilder().addComponents(units),
        new ActionRowBuilder().addComponents(arrivalTime)
    ];

    modal.addComponents(...rows);
    await interaction.showModal(modal);
}

async function processDefenseUnits(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const [, , unitType, ...restParts] = interaction.customId.split('_');
    const requestId = restParts.join('_');
    
    let defenseRequest = activeDefenseRequests.get(requestId);
    
    // Ha nincs mem√≥ri√°ban, rekonstru√°ljuk
    if (!defenseRequest) {
        defenseRequest = await reconstructDefenseRequest(interaction, requestId);
    }
    
    if (!defenseRequest) {
        await interaction.editReply({ content: '‚ùå Ez a v√©d√©si k√©r√©s m√°r nem akt√≠v!' });
        return;
    }

    const defenderName = interaction.fields.getTextInputValue('defender_name');
    const defenderVillage = interaction.fields.getTextInputValue('defender_village');
    const defenseUnits = interaction.fields.getTextInputValue('defense_units');
    const arrivalTime = interaction.fields.getTextInputValue('arrival_time');

    // V√©d≈ë hozz√°ad√°sa
    const defenderId = interaction.user.id;
    defenseRequest.defenders.set(defenderId, {
        name: defenderName,
        village: defenderVillage,
        units: defenseUnits,
        arrivalTime: arrivalTime,
        type: unitType,
        userId: defenderId
    });

    // V√©d≈ë jelentkez√©s embed
    const defenderEmbed = new EmbedBuilder()
        .setColor(config.colors.success)
        .setTitle('‚úÖ √öj V√©d≈ë Jelentkezett!')
        .addFields(
            { name: 'üë§ V√©d≈ë', value: `**${defenderName}** (<@${defenderId}>)`, inline: true },
            { name: 'üèòÔ∏è Falu', value: defenderVillage, inline: true },
            { name: '‚è∞ √ârkez√©s', value: arrivalTime, inline: true },
            { name: '‚öîÔ∏è Egys√©gek', value: defenseUnits, inline: false }
        )
        .setThumbnail(interaction.user.displayAvatarURL())
        .setTimestamp();

    // √úzenet k√ºld√©se a v√©d√©si csatorn√°ba
    const defenseChannel = interaction.guild.channels.cache.get(defenseRequest.channelId);
    if (defenseChannel) {
        await defenseChannel.send({ embeds: [defenderEmbed] });
    }

    // Meger≈ës√≠t≈ë √ºzenet
    await interaction.editReply({ 
        content: `‚úÖ **V√©d≈ë egys√©gek jelentve!**\nK√∂sz√∂nj√ºk a seg√≠ts√©get! üõ°Ô∏è` 
    });
}

async function showDefenseStatus(interaction, requestId) {
    let defenseRequest = activeDefenseRequests.get(requestId);
    
    // Ha nincs mem√≥ri√°ban, rekonstru√°ljuk
    if (!defenseRequest) {
        defenseRequest = await reconstructDefenseRequest(interaction, requestId);
    }
    
    if (!defenseRequest) {
        await interaction.reply({ content: '‚ùå Ez a v√©d√©si k√©r√©s m√°r nem akt√≠v!', ephemeral: true });
        return;
    }

    const defenders = Array.from(defenseRequest.defenders.values());
    
    const statusEmbed = new EmbedBuilder()
        .setColor(config.colors.defense)
        .setTitle('üìä V√©d√©si St√°tusz')
        .addFields(
            { name: 'üéØ K√©r√©s r√©szletei', value: `**Falu:** ${defenseRequest.villageName}\n**T√°mad√°s:** ${defenseRequest.attackTime}\n**Fal:** ${defenseRequest.wallLevel}`, inline: false },
            { name: 'üë• V√©d≈ëk sz√°ma', value: `**${defenders.length}** v√©d≈ë jelentkezett`, inline: true }
        );

    if (defenseRequest.reconstructed) {
        statusEmbed.addFields(
            { name: '‚ö†Ô∏è Figyelem', value: 'Ez a k√©r√©s a bot √∫jraind√≠t√°sa ut√°n lett rekonstru√°lva. Egyes adatok hi√°nyozhatnak.', inline: false }
        );
    }

    if (defenders.length > 0) {
        const defendersList = defenders.map((defender, index) => 
            `**${index + 1}.** ${defender.name} (${defender.village})\n   ‚öîÔ∏è ${defender.units}\n   ‚è∞ √ârkez√©s: ${defender.arrivalTime}`
        ).join('\n\n');

        statusEmbed.addFields(
            { name: 'üõ°Ô∏è V√©d≈ë er≈ëk', value: defendersList.length > 1024 ? defendersList.substring(0, 1020) + '...' : defendersList, inline: false }
        );
    } else {
        statusEmbed.addFields(
            { name: 'üõ°Ô∏è V√©d≈ë er≈ëk', value: '*M√©g nincs v√©d≈ë jelentkezve*', inline: false }
        );
    }

    await interaction.reply({ embeds: [statusEmbed], ephemeral: true });
}

async function closeDefenseRequest(interaction, requestId) {
    let defenseRequest = activeDefenseRequests.get(requestId);
    
    // Ha nincs mem√≥ri√°ban, rekonstru√°ljuk
    if (!defenseRequest) {
        defenseRequest = await reconstructDefenseRequest(interaction, requestId);
    }
    
    if (!defenseRequest) {
        await interaction.reply({ content: '‚ùå Ez a v√©d√©si k√©r√©s m√°r nem akt√≠v!', ephemeral: true });
        return;
    }

    // Csak a k√©relmez≈ë vagy adminisztr√°tor z√°rhatja le
    if (defenseRequest.requesterId && interaction.user.id !== defenseRequest.requesterId && !interaction.member.permissions.has(PermissionFlagsBits.ManageChannels)) {
        await interaction.reply({ content: '‚ùå Csak a k√©relmez≈ë vagy egy adminisztr√°tor z√°rhatja le a v√©d√©si k√©r√©st!', ephemeral: true });
        return;
    }

    const closeEmbed = new EmbedBuilder()
        .setColor(config.colors.warning)
        .setTitle('‚úÖ V√©d√©si K√©r√©s Lez√°rva')
        .setDescription(`A v√©d√©si k√©r√©s sikeresen lez√°rva ${interaction.user} √°ltal.`)
        .addFields(
            { name: 'üìä V√©gs≈ë st√°tusz', value: `**${defenseRequest.defenders.size}** v√©d≈ë jelentkezett √∂sszesen`, inline: false }
        )
        .setTimestamp();

    await interaction.reply({ embeds: [closeEmbed] });

    // Csatorna t√∂rl√©se 1 √≥ra m√∫lva
    setTimeout(async () => {
        try {
            const channel = interaction.guild.channels.cache.get(defenseRequest.channelId);
            if (channel) {
                await channel.delete('V√©d√©si k√©r√©s lez√°rva');
            }
        } catch (error) {
            console.error('Hiba a csatorna t√∂rl√©sekor:', error);
        }
    }, 3600000); // 1 √≥ra

    // Elt√°vol√≠t√°s az akt√≠v k√©r√©sek k√∂z√ºl
    activeDefenseRequests.delete(requestId);
}

module.exports = {
    handleDefenseCommand,
    showDefenseModal,
    processDefenseRequest,
    handleDefenseActions,
    processDefenseUnits,
    activeDefenseRequests
};
