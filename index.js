// index.js - Friss√≠tett f≈ë bot f√°jl (Slash Commands + UX fejleszt√©sekkel)
const { Client, GatewayIntentBits, EmbedBuilder, ActivityType, Collection, REST, Routes } = require('discord.js');
const config = require('./config');

// Parancs modulok import√°l√°sa
const travianCommands = require('./commands/travian');
const armyReportCommands = require('./commands/army-report');
const defenseCommands = require('./commands/defense-request');
const generalCommands = require('./commands/general');
const quickArmyReport = require('./commands/quick-army-report');
const { commands } = require('./slash-commands');
const { profileManager } = require('./utils/user-profiles');

// Bot l√©trehoz√°sa
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ]
});

// Parancsok gy≈±jtem√©nye
client.commands = new Collection();

// Slash parancsok regisztr√°l√°sa
async function registerSlashCommands() {
    const rest = new REST({ version: '10' }).setToken(config.discord.token);

    try {
        console.log('üîÑ Slash parancsok regisztr√°l√°sa kezd≈ëd√∂tt...');

        await rest.put(
            Routes.applicationGuildCommands(config.discord.clientId, config.discord.guildId),
            { body: commands.map(command => command.toJSON()) },
        );

        console.log('‚úÖ Slash parancsok sikeresen regisztr√°lva!');
    } catch (error) {
        console.error('‚ùå Hiba a slash parancsok regisztr√°l√°s√°ban:', error);
    }
}

// Bot bejelentkez√©s event
client.once('ready', async () => {
    console.log(`ü§ñ Bot bejelentkezett mint ${client.user.tag}!`);
    console.log(`üìä ${client.guilds.cache.size} szerveren vagyok jelen`);
    console.log(`üõ°Ô∏è V√©d√©si rendszer akt√≠v!`);
    console.log(`‚ö° Gyors parancsok akt√≠vak!`);
    
    // Slash parancsok regisztr√°l√°sa
    await registerSlashCommands();
    
    // Bot st√°tusz be√°ll√≠t√°sa
    client.user.setActivity('‚ö° /sereg | Gyors Travian seg√≠t≈ë!', { type: ActivityType.Watching });
});

// √öj tag csatlakoz√°s - fejlesztett √ºdv√∂zl≈ë
client.on('guildMemberAdd', async member => {
    const welcomeEmbed = new EmbedBuilder()
        .setColor('#00ff00')
        .setTitle('üéâ √údv√∂z√∂llek a Travian Alliance-ban!')
        .setDescription(`Szia ${member.user.username}! √údv√∂z√∂llek a **${member.guild.name}** szerveren!`)
        .addFields(
            { name: '‚ö° Gyors kezd√©s', value: 'Haszn√°ld a `/profil be√°ll√≠t` parancsot a szem√©lyre szabott funkci√≥ok√©rt!', inline: false },
            { name: 'üìö Hasznos parancsok', value: '‚Ä¢ `/sereg` - Gyors seregjelent≈ë\n‚Ä¢ `/v√©d√©s` - V√©d√©si k√©r√©s\n‚Ä¢ `/t√∂rzs` - T√∂rzs inform√°ci√≥k\n‚Ä¢ `/sebess√©g` - Egys√©g sebess√©gek', inline: false },
            { name: 'üí° Tipp', value: 'A slash parancsok (`/`) automatikus kieg√©sz√≠t√©st biztos√≠tanak!', inline: false }
        )
        .setThumbnail(member.user.displayAvatarURL())
        .setFooter({ text: 'Travian Bot v3.0 - Slash Commands Ready!' })
        .setTimestamp();

    const defaultChannel = member.guild.systemChannel;
    if (defaultChannel) {
        defaultChannel.send({ embeds: [welcomeEmbed] });
    }
});

// SLASH COMMANDS kezel√©se
client.on('interactionCreate', async interaction => {
    try {
        // Slash parancsok kezel√©se
        if (interaction.isChatInputCommand()) {
            const { commandName } = interaction;

            switch (commandName) {
                // GYORS SEREGJELENT≈ê (√öJ!)
                case 'sereg':
                    await quickArmyReport.handleQuickArmyReport(interaction);
                    break;

                // GYORS V√âD√âS (√öJ!)
                case 'v√©d√©s':
                    await handleQuickDefense(interaction);
                    break;

                // TRAVIAN SZ√ÅM√çT√ÅSOK
                case 'utaz√°s':
                    await handleSlashTravel(interaction);
                    break;
                case 'koordin√°ta':
                    await handleSlashCoords(interaction);
                    break;

                // INFORM√ÅCI√ìK
                case 't√∂rzs':
                    await handleSlashTribe(interaction);
                    break;
                case 'sebess√©g':
                    await handleSlashSpeed(interaction);
                    break;

                // PROFIL KEZEL√âS (√öJ!)
                case 'profil':
                    await handleSlashProfile(interaction);
                    break;

                // SABLON RENDSZER (√öJ!)
                case 'sablon':
                    await handleSlashTemplate(interaction);
                    break;

                // EML√âKEZTET≈êK (√öJ!)
                case 'eml√©keztet≈ë':
                    await handleSlashReminder(interaction);
                    break;

                // GYORS M≈∞VELETEK (√öJ!)
                case 'gyors':
                    await handleSlashQuick(interaction);
                    break;

                // ADMIN PARANCSOK
                case 'tiszt√≠t':
                    await handleSlashClear(interaction);
                    break;

                default:
                    await interaction.reply({ 
                        content: '‚ùå Ismeretlen parancs!', 
                        ephemeral: true 
                    });
            }
        }
        
        // Autocomplete kezel√©se
        else if (interaction.isAutocomplete()) {
            await handleAutocomplete(interaction);
        }
        
        // String Select Menu (Dropdown) - R√©gi rendszer t√°mogat√°sa
        else if (interaction.isStringSelectMenu()) {
            if (interaction.customId === 'tribe_select') {
                await armyReportCommands.handleTribeSelection(interaction);
            }
        }
        
        // Button interakci√≥k
        else if (interaction.isButton()) {
            const customId = interaction.customId;
            
            // Gyors seregjelent≈ë gombok (√öJ!)
            if (customId.startsWith('save_template_') || customId.startsWith('send_report_') || customId.startsWith('cancel_report_')) {
                await quickArmyReport.handleReportActions(interaction);
            }
            
            // R√©gi seregjelent≈ë gombok
            else if (customId.startsWith('army_report_')) {
                await armyReportCommands.handleArmyReportButton(interaction);
            }
            
            // V√©d√©si k√©r√©s gombok
            else if (customId === 'defense_request_modal') {
                await defenseCommands.showDefenseModal(interaction);
            }
            else if (customId.startsWith('defend_') || customId.startsWith('defense_')) {
                await defenseCommands.handleDefenseActions(interaction);
            }
        }
        
        // Modal Submit
        else if (interaction.isModalSubmit()) {
            const customId = interaction.customId;
            
            // Sablon n√©v modal (√öJ!)
            if (customId.startsWith('template_name_')) {
                await handleTemplateNameSubmit(interaction);
            }
            
            // R√©gi seregjelent≈ë modal
            else if (customId.startsWith('army_form_')) {
                await armyReportCommands.processArmyReport(interaction);
            }
            
            // V√©d√©si k√©r√©s modalok
            else if (customId === 'defense_form') {
                await defenseCommands.processDefenseRequest(interaction);
            }
            else if (customId.startsWith('defense_units_')) {
                await defenseCommands.processDefenseUnits(interaction);
            }
        }
    } catch (error) {
        console.error('Hiba az interakci√≥ kezel√©s√©ben:', error);
        
        if (!interaction.replied && !interaction.deferred) {
            await interaction.reply({ 
                content: '‚ùå Hiba t√∂rt√©nt az interakci√≥ feldolgoz√°sakor!', 
                ephemeral: true 
            });
        }
    }
});

// Hagyom√°nyos prefix parancsok t√°mogat√°sa (visszafel√© kompatibilit√°s)
client.on('messageCreate', async message => {
    if (message.author.bot) return;
    if (!message.content.startsWith(config.bot.prefix)) return;

    const args = message.content.slice(config.bot.prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    try {
        // Travian parancsok
        if (['utaz√°s', 'travel', 'koordin√°ta', 'coords', 'er≈ëforr√°s', 'resource', 'sebess√©g', 'speed', 't√∂rzs', 'tribe', 'eml√©keztet≈ë', 'remind'].includes(command)) {
            // √Åtir√°ny√≠t√°s slash parancsra
            const migrationEmbed = new EmbedBuilder()
                .setColor(config.colors.warning)
                .setTitle('‚ö° √öj √©s Jobb Parancsok!')
                .setDescription(`A \`!${command}\` parancs helyett haszn√°ld az √∫j slash parancsokat!`)
                .addFields(
                    { name: 'üöÄ √öj parancs', value: `\`/${command}\` - Automatikus kieg√©sz√≠t√©ssel!`, inline: false },
                    { name: 'üí° El≈ëny√∂k', value: '‚Ä¢ Automatikus kieg√©sz√≠t√©s\n‚Ä¢ Hibakezel√©s\n‚Ä¢ Gyorsabb haszn√°lat\n‚Ä¢ Mobilbar√°t', inline: false }
                )
                .setFooter({ text: 'G√©peld be a "/" karaktert √©s v√°laszd ki a parancsot!' })
                .setTimestamp();

            await message.reply({ embeds: [migrationEmbed] });
            
            // R√©gi parancs tov√°bbra is m≈±k√∂dik
            await travianCommands.handleTravianCommand(message, command, args);
        }
        
        // Seregjelent≈ë parancs
        else if (['seregjelent≈ë', 'army'].includes(command)) {
            const migrationEmbed = new EmbedBuilder()
                .setColor(config.colors.primary)
                .setTitle('‚ö° Haszn√°ld az √∫j gyors seregjelent≈ët!')
                .setDescription('Az √∫j `/sereg` paranccsal egy l√©p√©sben k√ºldhetsz jelent√©st!')
                .addFields(
                    { name: 'üöÄ √öj parancs', value: '`/sereg` - Minden egy helyen!', inline: false },
                    { name: 'üìù P√©lda', value: '`/sereg t√∂rzs:r√≥mai j√°t√©kos:Namezor90 falu:"Er≈ëd (15|25)" egys√©gek:"L√©gi√≥:100, Test≈ër:50"`', inline: false }
                )
                .setTimestamp();

            await message.reply({ embeds: [migrationEmbed] });
            // R√©gi rendszer is el√©rhet≈ë
            await armyReportCommands.handleArmyCommand(message);
        }
        
        // V√©d√©si k√©r√©s parancs
        else if (['v√©d√©s', 'defense', 'v√©delem'].includes(command)) {
            const migrationEmbed = new EmbedBuilder()
                .setColor(config.colors.defense)
                .setTitle('üõ°Ô∏è Haszn√°ld az √∫j gyors v√©d√©si k√©r√©st!')
                .setDescription('Az √∫j `/v√©d√©s` paranccsal gyorsabban k√©rhetsz seg√≠ts√©get!')
                .addFields(
                    { name: 'üöÄ √öj parancs', value: '`/v√©d√©s` - Gyors √©s egyszer≈±!', inline: false }
                )
                .setTimestamp();

            await message.reply({ embeds: [migrationEmbed] });
            await defenseCommands.handleDefenseCommand(message);
        }
        
        // √Åltal√°nos parancsok
        else if (['help', 'parancsok', 'commands', 'ping', 'info', 'user', 'avatar', 'tiszt√≠t'].includes(command)) {
            await generalCommands.handleGeneralCommand(message, command, args);
        }
        
        // Ismeretlen parancs
        else {
            const helpEmbed = new EmbedBuilder()
                .setColor(config.colors.primary)
                .setTitle('‚ùì Ismeretlen parancs')
                .setDescription('Pr√≥b√°ld ki az √∫j slash parancsokat!')
                .addFields(
                    { name: '‚ö° Leggyakoribb parancsok', value: '‚Ä¢ `/sereg` - Gyors seregjelent≈ë\n‚Ä¢ `/v√©d√©s` - V√©d√©si k√©r√©s\n‚Ä¢ `/utaz√°s` - Utaz√°si id≈ë\n‚Ä¢ `/t√∂rzs` - T√∂rzs inf√≥', inline: false },
                    { name: 'üìö Teljes lista', value: 'G√©peld be a `/` karaktert √©s b√∂ng√©szd a parancsokat!', inline: false }
                )
                .setTimestamp();

            await message.reply({ embeds: [helpEmbed] });
        }
    } catch (error) {
        console.error(`Hiba a(z) ${command} parancs v√©grehajt√°sakor:`, error);
        message.reply('‚ùå Hiba t√∂rt√©nt a parancs v√©grehajt√°sakor!');
    }
});

// SLASH COMMAND IMPLEMENT√ÅCI√ìK

async function handleSlashTravel(interaction) {
    const distance = interaction.options.getNumber('t√°vols√°g');
    const speed = interaction.options.getNumber('sebess√©g');

    const travelTimeSeconds = travianCommands.calculateTravelTime(distance, speed);
    const arrivalTime = new Date(Date.now() + travelTimeSeconds * 1000);

    const travelEmbed = new EmbedBuilder()
        .setColor('#8B4513')
        .setTitle('‚è±Ô∏è Utaz√°si Id≈ë Sz√°m√≠t√°s')
        .addFields(
            { name: 'üìè T√°vols√°g', value: `${distance} mez≈ë`, inline: true },
            { name: 'üèÉ Sebess√©g', value: `${speed} mez≈ë/√≥ra`, inline: true },
            { name: '‚è∞ Utaz√°si id≈ë', value: travianCommands.formatTime(travelTimeSeconds), inline: true },
            { name: 'üìÖ √ârkez√©s', value: `<t:${Math.floor(arrivalTime.getTime() / 1000)}:F>`, inline: false }
        )
        .setFooter({ text: 'üí° Tipp: Haszn√°ld a /sebess√©g parancsot az egys√©g sebess√©gekhez!' })
        .setTimestamp();

    await interaction.reply({ embeds: [travelEmbed] });
}

async function handleSlashCoords(interaction) {
    const x1 = interaction.options.getInteger('x1');
    const y1 = interaction.options.getInteger('y1');
    const x2 = interaction.options.getInteger('x2');
    const y2 = interaction.options.getInteger('y2');

    const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));

    const coordEmbed = new EmbedBuilder()
        .setColor('#4169E1')
        .setTitle('üìç Koordin√°ta T√°vols√°g')
        .addFields(
            { name: 'üìå Kiindul√≥pont', value: `(${x1}|${y1})`, inline: true },
            { name: 'üéØ C√©lpont', value: `(${x2}|${y2})`, inline: true },
            { name: 'üìè T√°vols√°g', value: `${distance.toFixed(2)} mez≈ë`, inline: true }
        )
        .setFooter({ text: 'üí° Tipp: Haszn√°ld a /utaz√°s parancsot az utaz√°si id≈ë sz√°m√≠t√°s√°hoz!' })
        .setTimestamp();

    await interaction.reply({ embeds: [coordEmbed] });
}

async function handleSlashTribe(interaction) {
    const tribeName = interaction.options.getString('n√©v');
    // Itt az eredeti t√∂rzs info logika, de egyszer≈±s√≠tve slash commandhoz
    // (A teljes implement√°ci√≥ a travian.js-ben van)
    
    const { getTribeData } = require('./utils/tribe-data');
    const tribeData = getTribeData(tribeName);
    
    if (!tribeData) {
        return interaction.reply({ 
            content: '‚ùå Ismeretlen t√∂rzs!', 
            ephemeral: true 
        });
    }

    const tribeEmbed = new EmbedBuilder()
        .setColor(tribeData.color)
        .setTitle(`${tribeData.emoji} ${tribeData.name}`)
        .setDescription('R√©szletes t√∂rzs inform√°ci√≥k')
        // Itt lenne a teljes t√∂rzs info...
        .setTimestamp();

    await interaction.reply({ embeds: [tribeEmbed] });
}

async function handleSlashSpeed(interaction) {
    const tribeName = interaction.options.getString('t√∂rzs');
    
    // Speed embed logic (simplified)
    const speedEmbed = new EmbedBuilder()
        .setColor('#FF6347')
        .setTitle('üèÉ Egys√©g Sebess√©gek')
        .setDescription(tribeName ? `Sz≈±rve: ${tribeName}` : 'Minden t√∂rzs sebess√©gei')
        // Itt lenne a teljes sebess√©g lista...
        .setTimestamp();

    await interaction.reply({ embeds: [speedEmbed] });
}

async function handleSlashProfile(interaction) {
    const subcommand = interaction.options.getSubcommand();

    switch (subcommand) {
        case 'be√°ll√≠t':
            await handleProfileSet(interaction);
            break;
        case 'mutat':
            await handleProfileShow(interaction);
            break;
        case 't√∂r√∂l':
            await handleProfileDelete(interaction);
            break;
    }
}

async function handleProfileSet(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const tribe = interaction.options.getString('t√∂rzs');
    const playerName = interaction.options.getString('j√°t√©kos_n√©v');
    const mainVillage = interaction.options.getString('f≈ë_falu');

    try {
        const profile = await profileManager.setUserProfile(interaction.user.id, {
            playerName,
            defaultTribe: tribe,
            mainVillage: mainVillage || null
        });

        const confirmEmbed = new EmbedBuilder()
            .setColor(config.colors.success)
            .setTitle('‚úÖ Profil Be√°ll√≠tva!')
            .setDescription('A profilod sikeresen mentve!')
            .addFields(
                { name: 'üë§ J√°t√©kos n√©v', value: profile.playerName, inline: true },
                { name: 'üèõÔ∏è Alap√©rtelmezett t√∂rzs', value: profile.defaultTribe, inline: true },
                { name: 'üèòÔ∏è F≈ë falu', value: profile.mainVillage || 'Nincs be√°ll√≠tva', inline: true }
            )
            .addFields({
                name: 'üéØ K√∂vetkez≈ë l√©p√©sek',
                value: '‚Ä¢ Haszn√°ld a `/sereg` parancsot gyors jelent√©shez\n‚Ä¢ Pr√≥b√°ld ki a `/sablon ment√©s` funkci√≥t\n‚Ä¢ √Åll√≠ts be eml√©keztet≈ëket `/eml√©keztet≈ë` paranccsal',
                inline: false
            })
            .setTimestamp();

        await interaction.editReply({ embeds: [confirmEmbed] });
    } catch (error) {
        console.error('Hiba a profil ment√©s√©n√©l:', error);
        await interaction.editReply({ content: '‚ùå Hiba a profil ment√©s√©n√©l!' });
    }
}

async function handleProfileShow(interaction) {
    const profile = profileManager.getUserProfile(interaction.user.id);

    if (!profile) {
        const noProfileEmbed = new EmbedBuilder()
            .setColor(config.colors.warning)
            .setTitle('üìã Nincs Be√°ll√≠tott Profil')
            .setDescription('M√©g nem √°ll√≠tottad be a profilodat!')
            .addFields({
                name: 'üöÄ Kezdj√ºk!',
                value: 'Haszn√°ld a `/profil be√°ll√≠t` parancsot a kezd√©shez!',
                inline: false
            })
            .setTimestamp();

        return interaction.reply({ embeds: [noProfileEmbed], ephemeral: true });
    }

    const profileEmbed = new EmbedBuilder()
        .setColor(config.colors.primary)
        .setTitle('üë§ A Te Profilod')
        .addFields(
            { name: 'üë§ J√°t√©kos n√©v', value: profile.playerName, inline: true },
            { name: 'üèõÔ∏è Alap√©rtelmezett t√∂rzs', value: profile.defaultTribe, inline: true },
            { name: 'üèòÔ∏è F≈ë falu', value: profile.mainVillage || 'Nincs be√°ll√≠tva', inline: true },
            { name: 'üìÖ L√©trehozva', value: new Date(profile.createdAt).toLocaleDateString('hu-HU'), inline: true },
            { name: 'üîÑ Utolj√°ra friss√≠tve', value: new Date(profile.updatedAt).toLocaleDateString('hu-HU'), inline: true }
        )
        .setThumbnail(interaction.user.displayAvatarURL())
        .setTimestamp();

    // Sablonok sz√°ma
    const templates = profileManager.getUserTemplates(interaction.user.id);
    profileEmbed.addFields({
        name: 'üìù Sablonok',
        value: `${templates.length} mentett sablon`,
        inline: true
    });

    await interaction.reply({ embeds: [profileEmbed], ephemeral: true });
}

async function handleProfileDelete(interaction) {
    const deleted = await profileManager.deleteUserProfile(interaction.user.id);

    if (deleted) {
        const deletedEmbed = new EmbedBuilder()
            .setColor(config.colors.warning)
            .setTitle('üóëÔ∏è Profil T√∂r√∂lve')
            .setDescription('A profilod √©s az √∂sszes sablonod t√∂r√∂lve lett!')
            .setTimestamp();

        await interaction.reply({ embeds: [deletedEmbed], ephemeral: true });
    } else {
        await interaction.reply({ 
            content: '‚ùå Nincs t√∂rlend≈ë profil!', 
            ephemeral: true 
        });
    }
}

// Template kezel√©s implement√°l√°sa a k√∂vetkez≈ë r√©szben...
async function handleSlashTemplate(interaction) {
    // Template logic itt lesz implement√°lva
    await interaction.reply({ content: 'Sablon funkci√≥ fejleszt√©s alatt...', ephemeral: true });
}

async function handleSlashReminder(interaction) {
    // Reminder logic itt lesz implement√°lva  
    await interaction.reply({ content: 'Eml√©keztet≈ë funkci√≥ fejleszt√©s alatt...', ephemeral: true });
}

async function handleSlashQuick(interaction) {
    // Quick actions logic itt lesz implement√°lva
    await interaction.reply({ content: 'Gyors m≈±veletek fejleszt√©s alatt...', ephemeral: true });
}

async function handleSlashClear(interaction) {
    // Clear logic itt lesz implement√°lva
    await interaction.reply({ content: 'Tiszt√≠t√°s funkci√≥ fejleszt√©s alatt...', ephemeral: true });
}

async function handleAutocomplete(interaction) {
    const { commandName, options } = interaction;

    if (commandName === 'sablon') {
        const focusedOption = options.getFocused(true);
        if (focusedOption.name === 'n√©v') {
            const templates = profileManager.getTemplateAutocomplete(
                interaction.user.id, 
                focusedOption.value
            );
            await interaction.respond(templates);
        }
    }
}

async function handleTemplateNameSubmit(interaction) {
    // Template name modal submission logic
    await interaction.reply({ content: 'Sablon n√©v ment√©s fejleszt√©s alatt...', ephemeral: true });
}

async function handleQuickDefense(interaction) {
    // Quick defense implementation
    await interaction.reply({ content: 'Gyors v√©d√©s fejleszt√©s alatt...', ephemeral: true });
}

// Glob√°lis hibakezel√©s
client.on('error', error => {
    console.error('Discord.js hiba:', error);
});

process.on('unhandledRejection', error => {
    console.error('Kezeletlen Promise elutas√≠t√°s:', error);
});

// Bot ind√≠t√°sa
client.login(config.discord.token);
