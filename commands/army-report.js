// commands/army-report.js - Seregjelent≈ë rendszer (JAV√çTOTT VERZI√ì)
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, StringSelectMenuBuilder } = require('discord.js');
const config = require('../config');
const { TRIBE_UNITS, getTribeData } = require('../utils/tribe-data');

// Akt√≠v jelent√©sek t√°rol√°sa (session data)
const activeReports = new Map();

async function handleArmyCommand(message) {
    // T√∂rzs v√°laszt√≥ dropdown
    const tribeSelect = new StringSelectMenuBuilder()
        .setCustomId('tribe_select')
        .setPlaceholder('üèõÔ∏è V√°laszd ki a t√∂rzsedet...')
        .addOptions([
            {
                label: 'R√≥mai Birodalom',
                description: 'Er≈ës v√©delem, kett≈ës √©p√≠tkez√©s',
                value: 'r√≥mai',
                emoji: 'üõ°Ô∏è'
            },
            {
                label: 'Germ√°n T√∂rzsek',
                description: 'Olcs√≥ egys√©gek, raid specialista',
                value: 'germ√°n',
                emoji: '‚öîÔ∏è'
            },
            {
                label: 'Gall T√∂rzsek',
                description: 'Gyors keresked≈ë, er≈ës v√©delem',
                value: 'gall',
                emoji: 'üèπ'
            },
            {
                label: 'Egyiptomi Birodalom',
                description: 'Gyors fejl≈ëd√©s, nagy kapacit√°s',
                value: 'egyiptomi',
                emoji: 'üè∫'
            },
            {
                label: 'Hun Birodalom',
                description: 'Gyors lovass√°g, nom√°d el≈ëny√∂k',
                value: 'hun',
                emoji: 'üèπ'
            }
        ]);

    const selectRow = new ActionRowBuilder().addComponents(tribeSelect);

    const reportEmbed = new EmbedBuilder()
        .setColor(config.colors.armyReport)
        .setTitle('‚öîÔ∏è Alliance Seregjelent≈ë v3.0')
        .setDescription('**üÜï √öj l√©pcs≈ës rendszer!**\n\n**1Ô∏è‚É£ V√°laszd ki a t√∂rzsedet**\n**2Ô∏è‚É£ Add meg a j√°t√©kos adatokat**\n**3Ô∏è‚É£ T√∂ltsd ki a gyalogs√°g egys√©geket**\n**4Ô∏è‚É£ T√∂ltsd ki a lovass√°g egys√©geket**\n**5Ô∏è‚É£ Automatikus bek√ºld√©s**')
        .addFields(
            { name: '‚ú® Mi v√°ltozott?', value: '‚Ä¢ T√∂rzsspecifikus egys√©glista\n‚Ä¢ Csak sz√°mokat kell √≠rni\n‚Ä¢ K√∂nnyebb √©s gyorsabb', inline: false },
            { name: 'üìä Hova ker√ºl?', value: 'A vezet≈ëk csatorn√°j√°ba automatikusan t√°bl√°zatos form√°ban.', inline: false }
        )
        .setFooter({ text: 'Alliance Management System v3.0 - L√©pcs≈ës jelent√©s' })
        .setTimestamp();

    await message.reply({ embeds: [reportEmbed], components: [selectRow] });
}

async function handleTribeSelection(interaction) {
    try {
        const selectedTribe = interaction.values[0];
        const tribeData = TRIBE_UNITS[selectedTribe];

        if (!tribeData) {
            await interaction.reply({ content: '‚ùå Ismeretlen t√∂rzs!', ephemeral: true });
            return;
        }

        // Session ID gener√°l√°sa
        const sessionId = `report_${Date.now()}_${interaction.user.id}`;
        
        // Session adatok ment√©se
        activeReports.set(sessionId, {
            userId: interaction.user.id,
            tribe: selectedTribe,
            tribeData: tribeData,
            step: 1,
            data: {},
            createdAt: new Date()
        });

        console.log(`üìä √öj session l√©trehozva: ${sessionId} - ${selectedTribe} t√∂rzs`);

        // J√°t√©kos adatok modal megjelen√≠t√©se
        const modal = new ModalBuilder()
            .setCustomId(`player_data_${sessionId}`)
            .setTitle(`${tribeData.emoji} ${tribeData.name} - J√°t√©kos Adatok`);

        const playerName = new TextInputBuilder()
            .setCustomId('player_name')
            .setLabel('üë§ J√°t√©kos neve')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('pl. Namezor90')
            .setRequired(true);

        const villageName = new TextInputBuilder()
            .setCustomId('village_name')
            .setLabel('üèòÔ∏è Falu neve √©s koordin√°t√°i')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('pl. Er≈ëd (15|25)')
            .setRequired(true);

        const rows = [
            new ActionRowBuilder().addComponents(playerName),
            new ActionRowBuilder().addComponents(villageName)
        ];

        modal.addComponents(...rows);
        await interaction.showModal(modal);

    } catch (error) {
        console.error('Hiba a t√∂rzs kiv√°laszt√°sakor:', error);
        await interaction.reply({ content: '‚ùå Hiba t√∂rt√©nt a t√∂rzs kiv√°laszt√°sakor!', ephemeral: true });
    }
}

async function processPlayerData(interaction) {
    try {
        console.log(`üîç Modal submit feldolgoz√°sa: ${interaction.customId}`);
        
        const sessionId = interaction.customId.replace('player_data_', '');
        console.log(`üÜî Session ID: ${sessionId}`);
        
        const session = activeReports.get(sessionId);
        
        if (!session) {
            console.log(`‚ùå Session nem tal√°lhat√≥: ${sessionId}`);
            await interaction.reply({ content: '‚ùå Lej√°rt session! Kezdd √∫jra a jelent√©st.', ephemeral: true });
            return;
        }

        console.log(`‚úÖ Session megtal√°lva: ${session.tribe}`);

        const playerName = interaction.fields.getTextInputValue('player_name');
        const villageName = interaction.fields.getTextInputValue('village_name');

        // Adatok ment√©se
        session.data.playerName = playerName;
        session.data.villageName = villageName;
        session.step = 2;

        console.log(`üìù J√°t√©kos adatok mentve: ${playerName} - ${villageName}`);

        // Gyalogs√°g modal megjelen√≠t√©se
        await showInfantryModal(interaction, sessionId, session);

    } catch (error) {
        console.error('Hiba a j√°t√©kos adatok feldolgoz√°sakor:', error);
        await interaction.reply({ content: '‚ùå Hiba t√∂rt√©nt az adatok ment√©sekor!', ephemeral: true });
    }
}

async function showInfantryModal(interaction, sessionId, session) {
    try {
        const tribeData = session.tribeData;
        const infantryUnits = tribeData.units.filter(u => u.type === 'infantry');

        console.log(`üõ°Ô∏è Gyalogs√°g egys√©gek (${tribeData.name}): ${infantryUnits.length} db`);
        console.log(`üìã Egys√©gek:`, infantryUnits.map(u => u.name));

        // Ha nincs gyalogs√°g, ugr√°s a lovass√°gra
        if (infantryUnits.length === 0) {
            console.log(`‚ö†Ô∏è Nincs gyalogs√°g a ${tribeData.name} t√∂rzsn√©l, ugr√°s a lovass√°gra`);
            session.data.infantry = {};
            session.step = 3;
            await showCavalryModal(interaction, sessionId, session);
            return;
        }

        const modal = new ModalBuilder()
            .setCustomId(`infantry_data_${sessionId}`)
            .setTitle(`${tribeData.emoji} Gyalogs√°g Egys√©gek`);

        const inputs = [];
        
        // Minden gyalogos egys√©ghez k√ºl√∂n mez≈ë (maximum 5)
        const unitsToShow = infantryUnits.slice(0, 5);
        console.log(`üìù Modal mez≈ëk l√©trehoz√°sa: ${unitsToShow.length} db`);
        
        unitsToShow.forEach((unit, index) => {
            console.log(`‚û°Ô∏è Mez≈ë ${index}: ${unit.name}`);
            const input = new TextInputBuilder()
                .setCustomId(`unit_${index}`)
                .setLabel(`üõ°Ô∏è ${unit.name}`)
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('0')
                .setRequired(false);
            
            inputs.push(new ActionRowBuilder().addComponents(input));
        });

        if (inputs.length === 0) {
            throw new Error('Nincsenek input mez≈ëk a modalhoz');
        }

        modal.addComponents(...inputs);
        await interaction.showModal(modal);

    } catch (error) {
        console.error('Hiba a gyalogs√°g modal megjelen√≠t√©sekor:', error);
        
        // Pr√≥b√°ljunk fallback m√≥dot
        try {
            session.data.infantry = {};
            session.step = 3;
            console.log(`üîÑ Fallback: ugr√°s lovass√°gra`);
            await showCavalryModal(interaction, sessionId, session);
        } catch (fallbackError) {
            console.error('Fallback is sikertelen:', fallbackError);
            await interaction.reply({ content: '‚ùå Hiba t√∂rt√©nt a gyalogs√°g ≈±rlap megjelen√≠t√©sekor!', ephemeral: true });
        }
    }
}

async function processInfantryData(interaction) {
    try {
        console.log(`üõ°Ô∏è Gyalogs√°g adatok feldolgoz√°sa: ${interaction.customId}`);
        
        const sessionId = interaction.customId.replace('infantry_data_', '');
        const session = activeReports.get(sessionId);
        
        if (!session) {
            await interaction.reply({ content: '‚ùå Lej√°rt session! Kezdd √∫jra a jelent√©st.', ephemeral: true });
            return;
        }

        const tribeData = session.tribeData;
        const infantryUnits = tribeData.units.filter(u => u.type === 'infantry');
        
        // Gyalogs√°g adatok ment√©se
        session.data.infantry = {};
        infantryUnits.slice(0, 5).forEach((unit, index) => {
            try {
                const value = interaction.fields.getTextInputValue(`unit_${index}`) || '0';
                const count = parseInt(value) || 0;
                if (count > 0) {
                    session.data.infantry[unit.name] = count;
                }
            } catch (fieldError) {
                console.log(`‚ö†Ô∏è Hi√°nyz√≥ mez≈ë: unit_${index}`);
            }
        });

        session.step = 3;

        console.log(`üìä Gyalogs√°g adatok mentve:`, session.data.infantry);

        // Lovass√°g modal megjelen√≠t√©se
        await showCavalryModal(interaction, sessionId, session);

    } catch (error) {
        console.error('Hiba a gyalogs√°g adatok feldolgoz√°sakor:', error);
        await interaction.reply({ content: '‚ùå Hiba t√∂rt√©nt a gyalogs√°g adatok ment√©sekor!', ephemeral: true });
    }
}

async function showCavalryModal(interaction, sessionId, session) {
    try {
        const tribeData = session.tribeData;
        const cavalryUnits = tribeData.units.filter(u => u.type === 'cavalry');

        console.log(`üêé Lovass√°g egys√©gek (${tribeData.name}): ${cavalryUnits.length} db`);
        console.log(`üìã Egys√©gek:`, cavalryUnits.map(u => u.name));

        // Ha nincs lovass√°g, ugr√°s a v√©gs≈ë jelent√©sre
        if (cavalryUnits.length === 0) {
            console.log(`‚ö†Ô∏è Nincs lovass√°g a ${tribeData.name} t√∂rzsn√©l, ugr√°s a v√©gs≈ë jelent√©sre`);
            session.data.cavalry = {};
            session.step = 4;
            await finalizeReport(interaction, sessionId, session);
            return;
        }

        const modal = new ModalBuilder()
            .setCustomId(`cavalry_data_${sessionId}`)
            .setTitle(`${tribeData.emoji} Lovass√°g Egys√©gek`);

        const inputs = [];
        
        // Minden lovas egys√©ghez k√ºl√∂n mez≈ë (maximum 5)
        const unitsToShow = cavalryUnits.slice(0, 5);
        console.log(`üìù Modal mez≈ëk l√©trehoz√°sa: ${unitsToShow.length} db`);
        
        unitsToShow.forEach((unit, index) => {
            console.log(`‚û°Ô∏è Mez≈ë ${index}: ${unit.name}`);
            const input = new TextInputBuilder()
                .setCustomId(`unit_${index}`)
                .setLabel(`üêé ${unit.name}`)
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('0')
                .setRequired(false);
            
            inputs.push(new ActionRowBuilder().addComponents(input));
        });

        if (inputs.length === 0) {
            throw new Error('Nincsenek input mez≈ëk a modalhoz');
        }

        modal.addComponents(...inputs);
        await interaction.showModal(modal);

    } catch (error) {
        console.error('Hiba a lovass√°g modal megjelen√≠t√©sekor:', error);
        
        // Pr√≥b√°ljunk fallback m√≥dot
        try {
            session.data.cavalry = {};
            session.step = 4;
            console.log(`üîÑ Fallback: ugr√°s v√©gs≈ë jelent√©sre`);
            await finalizeReport(interaction, sessionId, session);
        } catch (fallbackError) {
            console.error('Fallback is sikertelen:', fallbackError);
            await interaction.reply({ content: '‚ùå Hiba t√∂rt√©nt a lovass√°g ≈±rlap megjelen√≠t√©sekor!', ephemeral: true });
        }
    }
}

async function processCavalryData(interaction) {
    try {
        console.log(`üêé Lovass√°g adatok feldolgoz√°sa: ${interaction.customId}`);
        
        const sessionId = interaction.customId.replace('cavalry_data_', '');
        const session = activeReports.get(sessionId);
        
        if (!session) {
            await interaction.reply({ content: '‚ùå Lej√°rt session! Kezdd √∫jra a jelent√©st.', ephemeral: true });
            return;
        }

        const tribeData = session.tribeData;
        const cavalryUnits = tribeData.units.filter(u => u.type === 'cavalry');
        
        // Lovass√°g adatok ment√©se
        session.data.cavalry = {};
        cavalryUnits.slice(0, 5).forEach((unit, index) => {
            try {
                const value = interaction.fields.getTextInputValue(`unit_${index}`) || '0';
                const count = parseInt(value) || 0;
                if (count > 0) {
                    session.data.cavalry[unit.name] = count;
                }
            } catch (fieldError) {
                console.log(`‚ö†Ô∏è Hi√°nyz√≥ mez≈ë: unit_${index}`);
            }
        });

        session.step = 4;

        console.log(`üìä Lovass√°g adatok mentve:`, session.data.cavalry);

        // V√©gs≈ë jelent√©s √∂ssze√°ll√≠t√°sa √©s bek√ºld√©se
        await finalizeReport(interaction, sessionId, session);

    } catch (error) {
        console.error('Hiba a lovass√°g adatok feldolgoz√°sakor:', error);
        await interaction.reply({ content: '‚ùå Hiba t√∂rt√©nt a lovass√°g adatok ment√©sekor!', ephemeral: true });
    }
}

async function finalizeReport(interaction, sessionId, session) {
    try {
        await interaction.deferReply({ ephemeral: true });

        const { tribeData, data } = session;
        const { playerName, villageName, infantry = {}, cavalry = {} } = data;

        console.log(`üìä V√©gs≈ë jelent√©s √∂ssze√°ll√≠t√°sa: ${playerName}`);

        // Ostrom egys√©gek (alap√©rtelmezett: 0)
        const siege = {};

        // T√°bl√°zatos megjelen√≠t√©s
        function createUnitTable(units, emoji) {
            if (Object.keys(units).length === 0) return `${emoji} *Nincs egys√©g megadva*`;
            
            let table = `${emoji} **Egys√©gek:**\n\`\`\`\n`;
            table += '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n';
            table += '‚îÇ Egys√©g neve         ‚îÇ Darab   ‚îÇ\n';
            table += '‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n';
            
            for (const [name, count] of Object.entries(units)) {
                const paddedName = name.padEnd(19);
                const paddedCount = count.toString().padStart(7);
                table += `‚îÇ ${paddedName} ‚îÇ ${paddedCount} ‚îÇ\n`;
            }
            
            table += '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\`\`\`';
            return table;
        }

        // √ñsszes√≠t≈ë sz√°m√≠t√°sok
        const totalInfantry = Object.values(infantry).reduce((a, b) => a + b, 0);
        const totalCavalry = Object.values(cavalry).reduce((a, b) => a + b, 0);
        const totalSiege = Object.values(siege).reduce((a, b) => a + b, 0);
        const grandTotal = totalInfantry + totalCavalry + totalSiege;

        // Vezet≈ëi jelent√©s embed
        const leaderReportEmbed = new EmbedBuilder()
            .setColor(tribeData.color)
            .setTitle(`üìä ${tribeData.emoji} √öj Seregjelent√©s - ${tribeData.name}`)
            .addFields(
                { name: 'üë§ J√°t√©kos', value: `**${playerName}**`, inline: true },
                { name: 'üèòÔ∏è Falu', value: `**${villageName}**`, inline: true },
                { name: 'üèõÔ∏è T√∂rzs', value: `${tribeData.emoji} **${tribeData.name}**`, inline: true }
            );

        // Egys√©gek hozz√°ad√°sa ha vannak
        if (Object.keys(infantry).length > 0) {
            const infantryTable = createUnitTable(infantry, 'üõ°Ô∏è');
            const lines = infantryTable.split('\n');
            leaderReportEmbed.addFields({ 
                name: lines[0], 
                value: lines.slice(1).join('\n'), 
                inline: false 
            });
        }

        if (Object.keys(cavalry).length > 0) {
            const cavalryTable = createUnitTable(cavalry, 'üêé');
            const lines = cavalryTable.split('\n');
            leaderReportEmbed.addFields({ 
                name: lines[0], 
                value: lines.slice(1).join('\n'), 
                inline: false 
            });
        }

        // √ñsszes√≠t≈ë
        leaderReportEmbed.addFields(
            { 
                name: 'üìà √ñsszes√≠t≈ë', 
                value: `\`\`\`\nüõ°Ô∏è Gyalogs√°g: ${totalInfantry.toLocaleString()}\nüêé Lovass√°g: ${totalCavalry.toLocaleString()}\nüè∞ Ostrom:   ${totalSiege.toLocaleString()}\n${'‚îÄ'.repeat(20)}\nüìä √ñsszesen: ${grandTotal.toLocaleString()}\`\`\``, 
                inline: false 
            },
            { name: 'üìÖ Jelent√©s id≈ëpontja', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true },
            { name: 'üë®‚Äçüíº Jelentette', value: `<@${interaction.user.id}>`, inline: true }
        );

        leaderReportEmbed.setThumbnail(interaction.user.displayAvatarURL())
            .setTimestamp();

        // Vezet≈ëk csatorn√°j√°ba k√ºld√©s
        try {
            const leaderChannel = interaction.guild.channels.cache.get(config.channels.armyReports);
            if (leaderChannel) {
                await leaderChannel.send({ 
                    content: `üö® **√öj ${tribeData.name} seregjelent√©s √©rkezett!**`, 
                    embeds: [leaderReportEmbed] 
                });
                console.log(`‚úÖ Jelent√©s elk√ºldve a vezet≈ëi csatorn√°ba: ${leaderChannel.name}`);
            } else {
                console.log(`‚ùå Vezet≈ëi csatorna nem tal√°lhat√≥: ${config.channels.armyReports}`);
            }

            // Meger≈ës√≠t≈ë √ºzenet
            const confirmEmbed = new EmbedBuilder()
                .setColor(config.colors.success)
                .setTitle('‚úÖ Seregjelent√©s Sikeresen Elk√ºldve!')
                .setDescription(`A ${tribeData.emoji} **${tribeData.name}** jelent√©sed eljutott a vezet≈ës√©ghez.`)
                .addFields(
                    { name: 'üìä √ñsszes√≠t≈ë', value: `**J√°t√©kos:** ${playerName}\n**Falu:** ${villageName}\n**√ñsszes egys√©g:** ${grandTotal.toLocaleString()}`, inline: false },
                    { name: 'üìÖ Id≈ëpont', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true },
                    { name: 'üÜï Rendszer', value: 'L√©pcs≈ës jelent√©s v3.0', inline: true }
                )
                .setFooter({ text: 'Alliance Management System v3.0' })
                .setTimestamp();

            await interaction.editReply({ embeds: [confirmEmbed] });

            // Session t√∂rl√©se
            activeReports.delete(sessionId);
            console.log(`üóëÔ∏è Session t√∂r√∂lve: ${sessionId}`);

        } catch (channelError) {
            console.error('Hiba a csatorna k√ºld√©sn√©l:', channelError);
            
            const errorEmbed = new EmbedBuilder()
                .setColor(config.colors.error)
                .setTitle('‚ùå Hiba t√∂rt√©nt!')
                .setDescription('Nem siker√ºlt elk√ºldeni a jelent√©st. Ellen≈ërizd a csatorna be√°ll√≠t√°sokat.')
                .addFields(
                    { name: 'üîß Lehets√©ges megold√°sok', value: '‚Ä¢ Ellen≈ërizd a csatorna ID-t a config.js-ben\n‚Ä¢ Biztos√≠tsd, hogy a bot hozz√°f√©rjen a csatorn√°hoz', inline: false }
                )
                .setFooter({ text: 'K√©rj seg√≠ts√©get egy adminisztr√°tort√≥l' })
                .setTimestamp();

            await interaction.editReply({ embeds: [errorEmbed] });
        }

    } catch (error) {
        console.error('Hiba a v√©gs≈ë jelent√©s √∂ssze√°ll√≠t√°sakor:', error);
        
        try {
            const errorEmbed = new EmbedBuilder()
                .setColor(config.colors.error)
                .setTitle('‚ùå Kritikus hiba!')
                .setDescription('Nem siker√ºlt √∂ssze√°ll√≠tani a jelent√©st.')
                .setTimestamp();

            if (interaction.deferred) {
                await interaction.editReply({ embeds: [errorEmbed] });
            } else {
                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            }
        } catch (replyError) {
            console.error('Nem siker√ºlt a hiba√ºzenetet elk√ºldeni:', replyError);
        }
    }
}

// R√âGI FUNKCI√ìK (kompatibilit√°s√©rt megtartva, de m√°r nem haszn√°ljuk)
async function handleArmyReportButton(interaction) {
    await interaction.reply({ content: '‚ùå Ez a funkci√≥ elavult. Haszn√°ld az √∫j l√©pcs≈ës rendszert!', ephemeral: true });
}

async function processArmyReport(interaction) {
    await interaction.reply({ content: '‚ùå Ez a funkci√≥ elavult. Haszn√°ld az √∫j l√©pcs≈ës rendszert!', ephemeral: true });
}

module.exports = {
    handleArmyCommand,
    handleTribeSelection,
    processPlayerData,
    processInfantryData,
    processCavalryData,
    
    // R√©gi funkci√≥k (kompatibilit√°s√©rt)
    handleArmyReportButton,
    processArmyReport,
    
    // √öj export-ok
    activeReports
};
