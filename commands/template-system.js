// commands/template-system.js - Teljes sablon rendszer implement√°ci√≥
const { EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');
const config = require('../config');
const { profileManager, parseUnitsString, formatUnitsString } = require('../utils/user-profiles');
const { TRIBE_UNITS } = require('../utils/tribe-data');

async function handleSlashTemplate(interaction) {
    const subcommand = interaction.options.getSubcommand();

    switch (subcommand) {
        case 'ment√©s':
            await handleTemplateSave(interaction);
            break;
        case 'haszn√°l':
            await handleTemplateUse(interaction);
            break;
        case 'lista':
            await handleTemplateList(interaction);
            break;
        case 't√∂r√∂l':
            await handleTemplateDelete(interaction);
            break;
    }
}

async function handleTemplateSave(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const templateName = interaction.options.getString('n√©v');
    const tribe = interaction.options.getString('t√∂rzs');
    const unitsString = interaction.options.getString('egys√©gek');

    try {
        // Egys√©gek feldolgoz√°sa
        const parsedUnits = parseUnitsString(unitsString);
        
        if (Object.keys(parsedUnits).length === 0) {
            throw new Error('Nem siker√ºlt feldolgozni az egys√©geket.');
        }

        // Sablon ment√©se
        const template = await profileManager.saveTemplate(interaction.user.id, templateName, {
            tribe: tribe,
            units: parsedUnits
        });

        const confirmEmbed = new EmbedBuilder()
            .setColor(config.colors.success)
            .setTitle('‚úÖ Sablon Sikeresen Mentve!')
            .setDescription(`A **"${templateName}"** sablon el lett mentve.`)
            .addFields(
                { name: 'üèõÔ∏è T√∂rzs', value: tribe, inline: true },
                { name: '‚öîÔ∏è Egys√©gek', value: formatUnitsString(parsedUnits), inline: false },
                { name: 'üí° Haszn√°lat', value: `\`/sablon haszn√°l n√©v:${templateName}\``, inline: false }
            )
            .setTimestamp();

        await interaction.editReply({ embeds: [confirmEmbed] });

    } catch (error) {
        console.error('Hiba a sablon ment√©s√©n√©l:', error);
        
        const errorEmbed = new EmbedBuilder()
            .setColor(config.colors.error)
            .setTitle('‚ùå Hiba a sablon ment√©s√©n√©l!')
            .setDescription(error.message || 'Ismeretlen hiba t√∂rt√©nt')
            .addFields({
                name: 'üí° Seg√≠ts√©g',
                value: 'Haszn√°lj ilyen form√°tumot:\n`L√©gi√≥:100, Test≈ër:50, Equites:30`',
                inline: false
            })
            .setTimestamp();

        await interaction.editReply({ embeds: [errorEmbed] });
    }
}

async function handleTemplateUse(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const templateName = interaction.options.getString('n√©v');

    try {
        // Sablon keres√©se
        const template = profileManager.getUserTemplate(interaction.user.id, templateName);
        
        if (!template) {
            throw new Error(`Nem tal√°lhat√≥ "${templateName}" nev≈± sablon.`);
        }

        // Sablon haszn√°lat n√∂vel√©se
        await profileManager.useTemplate(interaction.user.id, templateName);

        // Sablon adatok feldolgoz√°sa
        const tribeData = TRIBE_UNITS[template.tribe];
        const unitsString = formatUnitsString(template.units);

        // El≈ën√©zeti embed
        const previewEmbed = new EmbedBuilder()
            .setColor(tribeData.color)
            .setTitle(`üìù "${templateName}" Sablon Haszn√°lata`)
            .setDescription('**Ez a sablon tartalma - haszn√°ld a `/sereg` parancsot a jelent√©shez!**')
            .addFields(
                { name: 'üèõÔ∏è T√∂rzs', value: `${tribeData.emoji} ${tribeData.name}`, inline: true },
                { name: 'üìä Haszn√°latok', value: `${template.useCount}x`, inline: true },
                { name: '‚öîÔ∏è Egys√©gek', value: unitsString, inline: false },
                { name: 'üöÄ Gyors parancs', value: `\`/sereg t√∂rzs:${template.tribe} j√°t√©kos:[NEVED] falu:[FALUD] egys√©gek:"${unitsString}"\``, inline: false }
            )
            .setFooter({ text: 'M√°sold ki a parancsot √©s cser√©ld le a [NEVED] √©s [FALUD] r√©szeket!' })
            .setTimestamp();

        await interaction.editReply({ embeds: [previewEmbed] });

    } catch (error) {
        console.error('Hiba a sablon haszn√°lat√°n√°l:', error);
        
        const errorEmbed = new EmbedBuilder()
            .setColor(config.colors.error)
            .setTitle('‚ùå Sablon nem tal√°lhat√≥!')
            .setDescription(error.message)
            .addFields({
                name: 'üí° El√©rhet≈ë sablonok',
                value: 'Haszn√°ld a `/sablon lista` parancsot a megl√©v≈ë sablonok megtekint√©s√©hez.',
                inline: false
            })
            .setTimestamp();

        await interaction.editReply({ embeds: [errorEmbed] });
    }
}

async function handleTemplateList(interaction) {
    const templates = profileManager.getUserTemplates(interaction.user.id);

    if (templates.length === 0) {
        const noTemplatesEmbed = new EmbedBuilder()
            .setColor(config.colors.warning)
            .setTitle('üìù Nincs Mentett Sablon')
            .setDescription('M√©g nem hozt√°l l√©tre egyetlen sablont sem!')
            .addFields({
                name: 'üöÄ Kezdj√ºnk!',
                value: 'Haszn√°ld a `/sablon ment√©s` parancsot az els≈ë sablon l√©trehoz√°s√°hoz.',
                inline: false
            })
            .setTimestamp();

        return interaction.reply({ embeds: [noTemplatesEmbed], ephemeral: true });
    }

    // Sablonok rendez√©se haszn√°lat szerint
    const sortedTemplates = templates.sort((a, b) => b.useCount - a.useCount);

    const listEmbed = new EmbedBuilder()
        .setColor(config.colors.primary)
        .setTitle(`üìù Mentett Sablonok (${templates.length})`)
        .setDescription('**Az √∂sszes mentett seregjelent≈ë sablonod:**')
        .setThumbnail(interaction.user.displayAvatarURL())
        .setTimestamp();

    // Sablonok hozz√°ad√°sa mez≈ëk√©nt
    for (let i = 0; i < Math.min(sortedTemplates.length, 10); i++) {
        const template = sortedTemplates[i];
        const tribeData = TRIBE_UNITS[template.tribe];
        const unitsPreview = Object.entries(template.units)
            .slice(0, 3)
            .map(([name, count]) => `${name}: ${count}`)
            .join(', ');
        
        const moreUnits = Object.keys(template.units).length > 3 ? '...' : '';

        listEmbed.addFields({
            name: `${i + 1}. ${tribeData.emoji} "${template.name}"`,
            value: `**T√∂rzs:** ${template.tribe}\n**Egys√©gek:** ${unitsPreview}${moreUnits}\n**Haszn√°lva:** ${template.useCount}x\n**Parancs:** \`/sablon haszn√°l n√©v:${template.name}\``,
            inline: false
        });
    }

    if (templates.length > 10) {
        listEmbed.setFooter({ text: `Csak az els≈ë 10 sablon van megjelen√≠tve a ${templates.length}-b√≥l.` });
    }

    await interaction.reply({ embeds: [listEmbed], ephemeral: true });
}

async function handleTemplateDelete(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const templateName = interaction.options.getString('n√©v');

    try {
        const deleted = await profileManager.deleteTemplate(interaction.user.id, templateName);
        
        if (!deleted) {
            throw new Error(`Nem tal√°lhat√≥ "${templateName}" nev≈± sablon.`);
        }

        const confirmEmbed = new EmbedBuilder()
            .setColor(config.colors.warning)
            .setTitle('üóëÔ∏è Sablon T√∂r√∂lve')
            .setDescription(`A **"${templateName}"** sablon sikeresen t√∂r√∂lve lett.`)
            .setTimestamp();

        await interaction.editReply({ embeds: [confirmEmbed] });

    } catch (error) {
        console.error('Hiba a sablon t√∂rl√©s√©n√©l:', error);
        
        const errorEmbed = new EmbedBuilder()
            .setColor(config.colors.error)
            .setTitle('‚ùå Sablon nem tal√°lhat√≥!')
            .setDescription(error.message)
            .setTimestamp();

        await interaction.editReply({ embeds: [errorEmbed] });
    }
}

// Sablon n√©v modal kezel√©se (gyors seregjelent≈ëb≈ël)
async function handleTemplateNameSubmit(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const templateName = interaction.fields.getTextInputValue('template_name');
    const userId = interaction.customId.replace('template_name_', '');

    // Jelent√©s adatok lek√©r√©se
    const reportData = global.pendingReports?.get(userId);
    if (!reportData) {
        return interaction.editReply({ 
            content: '‚ùå A jelent√©s adatok lej√°rtak! K√©rlek kezd √∫jra.' 
        });
    }

    try {
        // Sablon ment√©se
        const template = await profileManager.saveTemplate(userId, templateName, {
            tribe: reportData.tribe,
            units: reportData.validatedUnits
        });

        const confirmEmbed = new EmbedBuilder()
            .setColor(config.colors.success)
            .setTitle('‚úÖ Sablon Mentve!')
            .setDescription(`A **"${templateName}"** sablon el lett mentve a jelent√©sb≈ël.`)
            .addFields(
                { name: 'üèõÔ∏è T√∂rzs', value: reportData.tribe, inline: true },
                { name: 'üìä Egys√©gek t√≠pusai', value: `${Object.keys(reportData.validatedUnits.infantry).length} gyalogos, ${Object.keys(reportData.validatedUnits.cavalry).length} lovas, ${Object.keys(reportData.validatedUnits.siege).length} ostrom`, inline: true },
                { name: 'üí° Haszn√°lat', value: `\`/sablon haszn√°l n√©v:${templateName}\``, inline: false }
            )
            .setTimestamp();

        await interaction.editReply({ embeds: [confirmEmbed] });

    } catch (error) {
        console.error('Hiba a sablon ment√©s√©n√©l:', error);
        
        const errorEmbed = new EmbedBuilder()
            .setColor(config.colors.error)
            .setTitle('‚ùå Hiba a sablon ment√©s√©n√©l!')
            .setDescription('Nem siker√ºlt menteni a sablont.')
            .setTimestamp();

        await interaction.editReply({ embeds: [errorEmbed] });
    }
}

module.exports = {
    handleSlashTemplate,
    handleTemplateNameSubmit
};
