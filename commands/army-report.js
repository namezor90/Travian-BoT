// commands/army-report.js - Egyszer≈±s√≠tett seregjelent≈ë rendszer (V√âGLEGES VERZI√ì)
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, StringSelectMenuBuilder } = require('discord.js');
const config = require('../config');
const { TRIBE_UNITS, getTribeData } = require('../utils/tribe-data');

// Akt√≠v jelent√©sek t√°rol√°sa (session data)
const activeReports = new Map();

async function handleArmyCommand(message) {
    // T√∂rzs v√°laszt√≥ dropdown
    const tribeSelect = new StringSelectMenuBuilder()
        .setCustomId('tribe_select')
        .setPlaceholder('üèõÔ∏è V√°laszd ki a t√∂rzsedet...')
        .addOptions([
            {
                label: 'R√≥mai Birodalom',
                description: 'Er≈ës v√©delem, kett≈ës √©p√≠tkez√©s',
                value: 'r√≥mai',
                emoji: 'üõ°Ô∏è'
            },
            {
                label: 'Germ√°n T√∂rzsek',
                description: 'Olcs√≥ egys√©gek, raid specialista',
                value: 'germ√°n',
                emoji: '‚öîÔ∏è'
            },
            {
                label: 'Gall T√∂rzsek',
                description: 'Gyors keresked≈ë, er≈ës v√©delem',
                value: 'gall',
                emoji: 'üèπ'
            },
            {
                label: 'Egyiptomi Birodalom',
                description: 'Gyors fejl≈ëd√©s, nagy kapacit√°s',
                value: 'egyiptomi',
                emoji: 'üè∫'
            },
            {
                label: 'Hun Birodalom',
                description: 'Gyors lovass√°g, nom√°d el≈ëny√∂k',
                value: 'hun',
                emoji: 'üèπ'
            }
        ]);

    const selectRow = new ActionRowBuilder().addComponents(tribeSelect);

    const reportEmbed = new EmbedBuilder()
        .setColor(config.colors.armyReport)
        .setTitle('‚öîÔ∏è Alliance Seregjelent≈ë v3.1')
        .setDescription('**üÜï Egyszer≈±s√≠tett rendszer!**\n\n**1Ô∏è‚É£ V√°laszd ki a t√∂rzsedet**\n**2Ô∏è‚É£ T√∂ltsd ki az ≈±rlapot**\n**3Ô∏è‚É£ Automatikus bek√ºld√©s**')
        .addFields(
            { name: '‚ú® Mi v√°ltozott?', value: '‚Ä¢ Egyszer≈±bb folyamat\n‚Ä¢ Minden egys√©g egy ≈±rlapon\n‚Ä¢ Gyorsabb √©s megb√≠zhat√≥bb', inline: false },
            { name: 'üìä Hova ker√ºl?', value: 'A vezet≈ëk csatorn√°j√°ba automatikusan t√°bl√°zatos form√°ban.', inline: false },
            { name: 'üìù Egys√©g form√°tum', value: '`Egys√©g neve: darab, M√°sik egys√©g: darab`\nP√©lda: `L√©gi√≥: 100, Test≈ërs√©g: 50`', inline: false }
        )
        .setFooter({ text: 'Alliance Management System v3.1 - Egyszer≈±s√≠tett jelent√©s' })
        .setTimestamp();

    await message.reply({ embeds: [reportEmbed], components: [selectRow] });
}

async function handleTribeSelection(interaction) {
    try {
        const selectedTribe = interaction.values[0];
        const tribeData = TRIBE_UNITS[selectedTribe];

        if (!tribeData) {
            await interaction.reply({ content: '‚ùå Ismeretlen t√∂rzs!', ephemeral: true });
            return;
        }

        console.log(`üìä T√∂rzs kiv√°lasztva: ${tribeData.name}`);

        // K√∂zvetlen√ºl a teljes ≈±rlap megjelen√≠t√©se
        await showCompleteArmyModal(interaction, selectedTribe, tribeData);

    } catch (error) {
        console.error('Hiba a t√∂rzs kiv√°laszt√°sakor:', error);
        await interaction.reply({ content: '‚ùå Hiba t√∂rt√©nt a t√∂rzs kiv√°laszt√°sakor!', ephemeral: true });
    }
}

async function showCompleteArmyModal(interaction, selectedTribe, tribeData) {
    try {
        const modal = new ModalBuilder()
            .setCustomId(`complete_army_${selectedTribe}_${Date.now()}`)
            .setTitle(`${tribeData.emoji} ${tribeData.name} - Seregjelent√©s`);

        // J√°t√©kos adatok
        const playerName = new TextInputBuilder()
            .setCustomId('player_name')
            .setLabel('üë§ J√°t√©kos neve')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('pl. Namezor90')
            .setRequired(true);

        const villageName = new TextInputBuilder()
            .setCustomId('village_name')
            .setLabel('üèòÔ∏è Falu neve √©s koordin√°t√°i')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('pl. Er≈ëd (15|25)')
            .setRequired(true);

        // Egys√©g adatok - minden egys√©get egy sz√∂veges mez≈ëben
        const allUnits = tribeData.units;
        const unitNames = allUnits.slice(0, 3).map(u => u.name).join(', ');
        
        const unitsData = new TextInputBuilder()
            .setCustomId('units_data')
            .setLabel('‚öîÔ∏è Egys√©gek (n√©v: darab)')
            .setStyle(TextInputStyle.Paragraph)
            .setPlaceholder(`pl. ${allUnits[0]?.name}: 100, ${allUnits[1]?.name}: 50`)
            .setRequired(false);

        // Megjegyz√©s
        const notes = new TextInputBuilder()
            .setCustomId('notes')
            .setLabel('üìù Megjegyz√©sek (opcion√°lis)')
            .setStyle(TextInputStyle.Paragraph)
            .setPlaceholder('pl. Fejleszt√©s alatt, √∫j egys√©gek v√°rhat√≥ak...')
            .setRequired(false);

        const rows = [
            new ActionRowBuilder().addComponents(playerName),
            new ActionRowBuilder().addComponents(villageName),
            new ActionRowBuilder().addComponents(unitsData),
            new ActionRowBuilder().addComponents(notes)
        ];

        modal.addComponents(...rows);
        await interaction.showModal(modal);

    } catch (error) {
        console.error('Hiba a teljes ≈±rlap megjelen√≠t√©sekor:', error);
        await interaction.reply({ content: '‚ùå Hiba t√∂rt√©nt az ≈±rlap megjelen√≠t√©sekor!', ephemeral: true });
    }
}

async function processCompleteArmyReport(interaction) {
    try {
        await interaction.deferReply({ ephemeral: true });

        // Custom ID feldolgoz√°sa
        const customIdParts = interaction.customId.split('_');
        const selectedTribe = customIdParts[2];
        const tribeData = TRIBE_UNITS[selectedTribe];

        if (!tribeData) {
            await interaction.editReply({ content: '‚ùå Ismeretlen t√∂rzs!' });
            return;
        }

        console.log(`üìä Jelent√©s feldolgoz√°sa: ${tribeData.name}`);

        // Adatok kinyer√©se
        const playerName = interaction.fields.getTextInputValue('player_name');
        const villageName = interaction.fields.getTextInputValue('village_name');
        const unitsData = interaction.fields.getTextInputValue('units_data') || '';
        const notes = interaction.fields.getTextInputValue('notes') || '';

        // Valid√°ci√≥
        if (!playerName || playerName.trim().length === 0) {
            await interaction.editReply({ content: '‚ùå J√°t√©kos n√©v k√∂telez≈ë!' });
            return;
        }

        if (!villageName || villageName.trim().length === 0) {
            await interaction.editReply({ content: '‚ùå Falu n√©v k√∂telez≈ë!' });
            return;
        }

        // Egys√©gek feldolgoz√°sa
        const units = parseUnitsData(unitsData, tribeData);

        console.log(`üìù Feldolgozott egys√©gek:`, units);

        // Jelent√©s √∂ssze√°ll√≠t√°sa √©s k√ºld√©se
        await sendFinalReport(interaction, tribeData, {
            playerName: playerName.trim(),
            villageName: villageName.trim(),
            units,
            notes: notes.trim()
        });

    } catch (error) {
        console.error('Hiba a teljes jelent√©s feldolgoz√°sakor:', error);
        
        if (interaction.deferred) {
            await interaction.editReply({ content: '‚ùå Hiba t√∂rt√©nt a jelent√©s feldolgoz√°sakor!' });
        } else {
            await interaction.reply({ content: '‚ùå Hiba t√∂rt√©nt a jelent√©s feldolgoz√°sakor!', ephemeral: true });
        }
    }
}

function parseUnitsData(unitsText, tribeData) {
    const units = {
        infantry: {},
        cavalry: {},
        siege: {}
    };

    if (!unitsText || unitsText.trim().length === 0) {
        return units;
    }

    try {
        // Egys√©gek feldolgoz√°sa (n√©v: sz√°m form√°tumban)
        const unitEntries = unitsText.split(',').map(entry => entry.trim());
        
        unitEntries.forEach(entry => {
            const match = entry.match(/^(.+?):\s*(\d+)$/);
            if (match) {
                const unitName = match[1].trim();
                const count = parseInt(match[2]);
                
                // Egys√©g keres√©se a t√∂rzs adatokban
                const unit = tribeData.units.find(u => 
                    u.name.toLowerCase() === unitName.toLowerCase()
                );
                
                if (unit && count > 0) {
                    units[unit.type][unit.name] = count;
                    console.log(`‚úÖ Egys√©g hozz√°adva: ${unit.name} (${unit.type}) - ${count} db`);
                } else {
                    console.log(`‚ö†Ô∏è Ismeretlen egys√©g vagy nulla √©rt√©k: ${unitName} - ${count}`);
                }
            }
        });
    } catch (parseError) {
        console.error('Hiba az egys√©gek feldolgoz√°sakor:', parseError);
    }

    return units;
}

async function sendFinalReport(interaction, tribeData, data) {
    try {
        const { playerName, villageName, units, notes } = data;

        // √ñsszes√≠t≈ë sz√°m√≠t√°sok
        const totalInfantry = Object.values(units.infantry).reduce((a, b) => a + b, 0);
        const totalCavalry = Object.values(units.cavalry).reduce((a, b) => a + b, 0);
        const totalSiege = Object.values(units.siege).reduce((a, b) => a + b, 0);
        const grandTotal = totalInfantry + totalCavalry + totalSiege;

        // T√°bl√°zatos megjelen√≠t√©s
        function createUnitTable(unitObj, emoji, title) {
            if (Object.keys(unitObj).length === 0) return `${emoji} **${title}:** *Nincs egys√©g*`;
            
            let table = `${emoji} **${title}:**\n\`\`\`\n`;
            table += '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n';
            table += '‚îÇ Egys√©g neve         ‚îÇ Darab   ‚îÇ\n';
            table += '‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n';
            
            for (const [name, count] of Object.entries(unitObj)) {
                const paddedName = name.padEnd(19);
                const paddedCount = count.toString().padStart(7);
                table += `‚îÇ ${paddedName} ‚îÇ ${paddedCount} ‚îÇ\n`;
            }
            
            table += '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\`\`\`';
            return table;
        }

        // Vezet≈ëi jelent√©s embed
        const leaderReportEmbed = new EmbedBuilder()
            .setColor(tribeData.color)
            .setTitle(`üìä ${tribeData.emoji} √öj Seregjelent√©s - ${tribeData.name}`)
            .addFields(
                { name: 'üë§ J√°t√©kos', value: `**${playerName}**`, inline: true },
                { name: 'üèòÔ∏è Falu', value: `**${villageName}**`, inline: true },
                { name: 'üèõÔ∏è T√∂rzs', value: `${tribeData.emoji} **${tribeData.name}**`, inline: true }
            );

        // Egys√©gek hozz√°ad√°sa
        if (Object.keys(units.infantry).length > 0) {
            const infantryTable = createUnitTable(units.infantry, 'üõ°Ô∏è', 'Gyalogs√°g');
            const lines = infantryTable.split('\n');
            leaderReportEmbed.addFields({ 
                name: 'üõ°Ô∏è Gyalogs√°g', 
                value: lines.slice(1).join('\n'), 
                inline: false 
            });
        }

        if (Object.keys(units.cavalry).length > 0) {
            const cavalryTable = createUnitTable(units.cavalry, 'üêé', 'Lovass√°g');
            const lines = cavalryTable.split('\n');
            leaderReportEmbed.addFields({ 
                name: 'üêé Lovass√°g', 
                value: lines.slice(1).join('\n'), 
                inline: false 
            });
        }

        if (Object.keys(units.siege).length > 0) {
            const siegeTable = createUnitTable(units.siege, 'üè∞', 'Ostrom');
            const lines = siegeTable.split('\n');
            leaderReportEmbed.addFields({ 
                name: 'üè∞ Ostrom', 
                value: lines.slice(1).join('\n'), 
                inline: false 
            });
        }

        // √ñsszes√≠t≈ë
        leaderReportEmbed.addFields(
            { 
                name: 'üìà √ñsszes√≠t≈ë', 
                value: `\`\`\`\nüõ°Ô∏è Gyalogs√°g: ${totalInfantry.toLocaleString()}\nüêé Lovass√°g: ${totalCavalry.toLocaleString()}\nüè∞ Ostrom:   ${totalSiege.toLocaleString()}\n${'‚îÄ'.repeat(20)}\nüìä √ñsszesen: ${grandTotal.toLocaleString()}\`\`\``, 
                inline: false 
            },
            { name: 'üìÖ Jelent√©s id≈ëpontja', value: `<t:${Math.floor(Date.
